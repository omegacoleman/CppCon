[Script Info]
; Script generated by Aegisub 3.1.3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
Last Style Storage: Default
Aegisub Scroll Position: 3
Aegisub Active Line: 15
Aegisub Video Zoom Percent: 1.000000
PlayResX: 1920
PlayResY: 1080
Audio URI: ../../../Videos/CppCon2015/BjarneStroustrupWritingGoodC++14.mp4
Video File: ../../../Videos/CppCon2015/BjarneStroustrupWritingGoodC++14.mp4
Aegisub Video Aspect Ratio: c1.777778
Aegisub Video Position: 2832

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Courier New,55,&H00FF00FF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,10,10,20,1
Style: 居中标题,文泉驿正黑,150,&H0097108D,&H000000FF,&H00000000,&H00F7A350,0,0,0,0,100,100,0,0,1,3,6,8,10,10,10,1
Style: 观众提问,Arial,55,&H00FFFF00,&H000000FF,&H0000FFFF,&H00000000,0,0,0,0,100,100,0,0,1,1,1,2,10,10,10,1
Style: 演讲回答,Arial,55,&H000000FF,&H00000000,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:07.10,居中标题,,0,0,0,,avplayer.org\n社区出品
Comment: 0,0:00:05.00,0:00:07.00,Default,,0,0,0,,视频文件请到 http://pan.baidu.com/s/1pJquXBl 下载，提取码 2in6
Dialogue: 0,0:00:00.00,0:00:02.04,Default,,0,0,0,,好， 可以开始了
Dialogue: 0,0:00:05.41,0:00:10.45,Default,,0,0,0,,欢迎欢迎～看到那么多人我好兴奋啊～
Dialogue: 0,0:00:10.75,0:00:19.76,Default,,0,0,0,,特别是老朋友都在，还多了不少新朋友，我开心的紧张死了～
Dialogue: 0,0:00:20.19,0:00:27.90,Default,,0,0,0,,今天，我就来谈谈如何优美地写现代C++代码
Dialogue: 0,0:00:28.23,0:00:39.16,Default,,0,0,0,,我想大家和我一样，都被一个问题困惑，到底什么是好的现代c++代码呢？
Dialogue: 0,0:00:39.45,0:00:46.18,Default,,0,0,0,,过去的5年里，我们对c++做了不少手术
Dialogue: 0,0:00:46.37,0:00:52.47,Default,,0,0,0,,一些人开始觉得自己知道咋写好c++了
Dialogue: 0,0:00:52.74,0:00:55.74,Default,,0,0,0,,另外的人就开始追问了，“你知道？快告诉我啊”
Dialogue: 0,0:00:55.74,0:01:04.02,Default,,0,0,0,,于是今春，我决定开一个项目，告诉大家咋写好c++
Dialogue: 0,0:01:04.05,0:01:09.46,Default,,0,0,0,,于是发现其他人也有些个想法咯
Dialogue: 0,0:01:09.61,0:01:13.79,Default,,0,0,0,,于是我们来回答这个问题好了
Dialogue: 0,0:01:14.04,0:01:27.32,Default,,0,0,0,,且慢，谨记我们在帮助超过4百万的c++程序员
Dialogue: 0,0:01:27.57,0:01:34.16,Default,,0,0,0,,如果我们的办法仅有200个专家会用是没用的
Dialogue: 0,0:01:34.47,0:01:42.20,Default,,0,0,0,,所以这个项目的目的是要帮助更多的人
Dialogue: 0,0:01:42.57,0:01:46.56,Default,,0,0,0,,以及面前各位，现在我们有一个伟大的语言
Dialogue: 0,0:01:46.65,0:01:52.74,Default,,0,0,0,,这是一个现代语言，它能做10~20年前我们做不到的酷事
Dialogue: 0,0:01:52.79,0:01:59.63,Default,,0,0,0,,C++11非常酷，C++14更好。两者都在广泛的被使用中
Dialogue: 0,0:01:59.63,0:02:02.09,Default,,0,0,0,,这些都不是玩具语言
Dialogue: 0,0:02:02.24,0:02:08.61,Default,,0,0,0,,据我所了解的标准委员会正在制定的C++17使其更加完美
Dialogue: 0,0:02:08.85,0:02:22.51,Default,,0,0,0,,他们正在制定相关规范文件以及退出新的概念
Dialogue: 0,0:02:22.51,0:02:44.95,Default,,0,0,0,,因此，从我多年来的经验上认为，自从C++11之后将变得更容易实现、更容易维护、效率更高、阅读清晰、更精简
Dialogue: 0,0:02:45.54,0:02:47.11,Default,,0,0,0,,这是一个事实
Dialogue: 0,0:02:47.52,0:02:51.40,Default,,0,0,0,,实际上很少在做这样的事情
Dialogue: 0,0:02:53.67,0:02:57.47,Default,,0,0,0,,也许你认识一千人在写这样的现代C++代码
Dialogue: 0,0:02:57.74,0:03:02.86,Default,,0,0,0,,甚至你认识一万人正在写现代C++代码，但是他们始终还是很小的一部分
Dialogue: 0,0:03:02.86,0:03:04.35,Default,,0,0,0,,我们必须要做的更好
Dialogue: 0,0:03:04.35,0:03:10.78,Default,,0,0,0,,很多人在用SB的方式写C++
Dialogue: 0,0:03:11.23,0:03:16.20,Default,,0,0,0,,不信你去网上看，你会看到每个菜鸟都臆想自己是语音专家
Dialogue: 0,0:03:16.20,0:03:20.40,Default,,0,0,0,,和谈论各种右值引用的语法问题
Dialogue: 0,0:03:20.40,0:03:27.65,Default,,0,0,0,,这种问题存在于大多数代码中，除非你使用高性能库
Dialogue: 0,0:03:27.65,0:03:34.68,Default,,0,0,0,,所以他们都纠结在语言本身从而迷失在技术细节中
Dialogue: 0,0:03:35.11,0:03:43.55,Default,,0,0,0,,基本上的想法是："医生，用锤子砸我的头会伤害到我的".显而易见的答案是"不要这样做!"
Dialogue: 0,0:03:43.81,0:03:45.81,Default,,0,0,0,,而这正是我们想做的
Dialogue: 0,0:03:46.93,0:03:49.05,Default,,0,0,0,,这句话是我曾经说过的——
Dialogue: 0,0:03:52.45,0:03:56.77,Default,,0,0,0,,C++语言有较小的又安全的语言，要努力发扬光大
Dialogue: 0,0:03:56.77,0:04:02.50,Default,,0,0,0,,我想我当时说这句话的时候似乎是1994年还是1992年甚至更久之前了
Dialogue: 0,0:04:02.75,0:04:05.78,Default,,0,0,0,,今天看来依然正确
Dialogue: 0,0:04:05.93,0:04:12.63,Default,,0,0,0,,你可以简化代码你可以维持高效率，我们不限制你能说什么
Dialogue: 0,0:04:12.63,0:04:14.24,Default,,0,0,0,,这些都是重要的事情
Dialogue: 0,0:04:14.24,0:04:16.24,Default,,0,0,0,,这就是C Plus Plus！
Dialogue: 0,0:04:16.24,0:04:21.11,Default,,0,0,0,,它也不是专为特殊应用程序设计的语言
Dialogue: 0,0:04:21.73,0:04:25.34,Default,,0,0,0,,所以，让我们努力让它变得更好
Dialogue: 0,0:04:25.57,0:04:30.84,Default,,0,0,0,,很多人用它发明了更好更简单的新编程语言
Dialogue: 0,0:04:30.84,0:04:32.84,Default,,0,0,0,,但不是现在
Dialogue: 0,0:04:32.84,0:04:42.18,Default,,0,0,0,,如果你发明的新语言在十年内都有很多人在使用它，那么就算成功了
Dialogue: 0,0:04:42.36,0:04:48.97,Default,,0,0,0,,新的一般用途的编程语言能够成功收费盈利的可能性非常低
Dialogue: 0,0:04:48.97,0:04:50.97,Default,,0,0,0,,所以，让我们现在就做！
Dialogue: 0,0:04:51.20,0:04:53.91,Default,,0,0,0,,我想要使用这些编译器
Dialogue: 0,0:04:53.91,0:04:59.92,Default,,0,0,0,,我的意思是，你能使用你的编译器使你的代码优化多少？
Dialogue: 0,0:04:59.92,0:05:08.69,Default,,0,0,0,,doesn't matter which compiler you are using for a modern compiler and sort of standard hardware. 它是令人惊叹的。
Dialogue: 0,0:05:08.90,0:05:15.69,Default,,0,0,0,,我的意思是我不确定十年内能否完成它，但是他们这样做了很长时间
Dialogue: 0,0:05:15.69,0:05:23.70,Default,,0,0,0,,this doesn't just happen for a new language unless you can hijack the c++ code generation phase. which is a fair gain.
Dialogue: 0,0:05:23.94,0:05:32.82,Default,,0,0,0,,因此，我们需要去制定编码准则，为那些想写现代C++代码的人引路
Dialogue: 0,0:05:33.01,0:05:40.04,Default,,0,0,0,,并且，我应该告诉那些人什么事情不应该做
Dialogue: 0,0:05:40.04,0:05:43.04,Default,,0,0,0,,所以你需要工具和库的支持
Dialogue: 0,0:05:43.18,0:05:50.25,Default,,0,0,0,,而且我们想要程序通用、性能高、代码简单、程序轻简
Dialogue: 0,0:05:50.25,0:05:54.77,Default,,0,0,0,,我目前不想让C++程序运行在特殊的硬件和软件中
Dialogue: 0,0:05:55.05,0:05:56.52,Default,,0,0,0,,所有的人都绝不认输
Dialogue: 0,0:05:56.52,0:06:02.78,Default,,0,0,0,,我认为我们能够做到，我们不是孤军奋战
Dialogue: 0,0:06:02.78,0:06:06.50,Default,,0,0,0,,好吧，我知道确实有天才能办到
Dialogue: 0,0:06:06.50,0:06:08.99,Default,,0,0,0,,但是我想我可以确定一点，没有任何人可以做到
Dialogue: 0,0:06:09.14,0:06:11.97,Default,,0,0,0,,并且没有任何一家公司能够做到
Dialogue: 0,0:06:12.11,0:06:17.39,Default,,0,0,0,,它将让我们认识到某些公司的特殊兴趣
Dialogue: 0,0:06:17.39,0:06:19.15,Default,,0,0,0,,你完全不能相信这一切
Dialogue: 0,0:06:19.15,0:06:27.14,Default,,0,0,0,,很久以前我开始就参加了C++标准制定大会，所以请大家帮忙
Dialogue: 0,0:06:27.14,0:06:33.16,Default,,0,0,0,,我想要说一点关于能够帮助我们以及我们能够做到的事情
Dialogue: 0,0:06:33.16,0:06:36.05,Default,,0,0,0,,所以应该从最原始的工作开始
Dialogue: 0,0:06:36.05,0:06:39.39,Default,,0,0,0,,曾经有一个项目是来自于微软的Herb Sutter和他的朋友们
Dialogue: 0,0:06:39.39,0:06:42.01,Default,,0,0,0,,我开始的时候是在Morgan Stanley
Dialogue: 0,0:06:42.01,0:06:45.98,Default,,0,0,0,,欧洲核子研究中心（CERN）后来也加入，并作出了贡献
Dialogue: 0,0:06:45.98,0:06:47.98,Default,,0,0,0,,他们提交的那些代码都可用
Dialogue: 0,0:06:47.98,0:06:49.98,Default,,0,0,0,,他们的存在
Dialogue: 0,0:06:49.98,0:06:55.06,Default,,0,0,0,,你能够在github上找到它，给你们一个url
Dialogue: 0,0:06:55.06,0:06:58.29,Default,,0,0,0,,这里有一些准则，都在这上面
Dialogue: 0,0:06:58.49,0:07:00.64,Default,,0,0,0,,还有支持一些轻量级的库
Dialogue: 0,0:07:00.64,0:07:11.48,Default,,0,0,0,,那些大多是一些非常简答的类映射到标准库的东西，如果不直接映射到扩平台Ｃ＋＋
Dialogue: 0,0:07:11.48,0:07:16.44,Default,,0,0,0,,便携式的意义 Ｍicrosoft, gcc, clang; Windows, Linux
Dialogue: 0,0:07:16.53,0:07:17.64,Default,,0,0,0,,和mac.
Dialogue: 0,0:07:17.97,0:07:25.52,Default,,0,0,0,,这是一个分析工具，它是由微软的一个家伙写的
Dialogue: 0,0:07:25.53,0:07:38.24,Default,,0,0,0,,我们希望以后有可用的port，或许是十一月？我不知道，我的意思你们都明白软件项目时间易遭受延误。
Dialogue: 0,0:07:38.42,0:07:41.09,Default,,0,0,0,,但是我们正在计划做这些事
Dialogue: 0,0:07:43.13,0:07:46.58,Default,,0,0,0,,它已经存在了，所以你可以说我在胡扯
Dialogue: 0,0:07:46.93,0:07:50.52,Default,,0,0,0,,它还获得了麻省理工学院授予使用许可，所以它非常开放和自由
Dialogue: 0,0:07:50.52,0:07:51.44,Default,,0,0,0,,所以你可以轻松地得到它
Dialogue: 0,0:07:51.88,0:07:54.10,Default,,0,0,0,,或者谈论更多关于此类内容
Dialogue: 0,0:07:55.02,0:08:01.92,Default,,0,0,0,,我要去解释一下我们正在做的高级别条款和一些具体例子
Dialogue: 0,0:08:02.17,0:08:04.88,Default,,0,0,0,,Herb Sutter 待会会说这些细节
Dialogue: 0,0:08:05.23,0:08:13.32,Default,,0,0,0,,Gabriel Dos Reis 打算讨论一下具体怎么做,呃,联系标准委员会讨论编写更好的代码
Dialogue: 0,0:08:13.32,0:08:21.84,Default,,0,0,0,,Neil Macintosh 写了一个工具，我们接下来会谈论一些关于类的静态分析
Dialogue: 0,0:08:21.95,0:08:23.12,Default,,0,0,0,,这是所有的弱点
Dialogue: 0,0:08:23.83,0:08:29.08,Default,,0,0,0,,这是代码准则的问题
Dialogue: 0,0:08:29.33,0:08:30.44,Default,,0,0,0,,哪一个是...
Dialogue: 0,0:08:30.45,0:08:32.65,Default,,0,0,0,,你见过一个你真的喜欢的吗？
Dialogue: 0,0:08:32.92,0:08:37.18,Default,,0,0,0,,这可能是非常必要的，就像药，味道很不好喝
Dialogue: 0,0:08:37.77,0:08:39.63,Default,,0,0,0,,我们都讨厌编码规则
Dialogue: 0,0:08:39.79,0:08:44.83,Default,,0,0,0,,常见警告多亏那些菜鸟和SB
Dialogue: 0,0:08:44.92,0:08:46.31,Default,,0,0,0,,但是基本上我们不喜欢它
Dialogue: 0,0:08:46.60,0:08:48.76,Default,,0,0,0,,其中一个原因是：
Dialogue: 0,0:08:48.97,0:08:53.48,Default,,0,0,0,,编码规范更倾向于编写不容易发生事故的代码
Dialogue: 0,0:08:53.77,0:08:59.96,Default,,0,0,0,,所以要让菜鸟避免犯愚蠢的错
Dialogue: 0,0:09:00.01,0:09:02.87,Default,,0,0,0,,所以列出了非常多规则列表申明不能那样做
Dialogue: 0,0:09:02.96,0:09:03.49,Default,,0,0,0,,和
Dialogue: 0,0:09:03.68,0:09:07.03,Default,,0,0,0,,我不喜欢这种名单，我知道你们绝大多数人也不喜欢这种名单
Dialogue: 0,0:09:07.18,0:09:12.34,Default,,0,0,0,,很多组织在一开始就制订了这些规则
Dialogue: 0,0:09:12.40,0:09:18.41,Default,,0,0,0,,他们也不知道到底想要做什么，他们就是想要避免一些问题而已
Dialogue: 0,0:09:18.41,0:09:21.54,Default,,0,0,0,,还把规则放在很低的位置
Dialogue: 0,0:09:21.54,0:09:22.99,Default,,0,0,0,,我的意思是.呃...
Dialogue: 0,0:09:23.07,0:09:25.20,Default,,0,0,0,,是否用下划线？
Dialogue: 0,0:09:25.20,0:09:27.90,Default,,0,0,0,,用多少空格缩进？
Dialogue: 0,0:09:28.24,0:09:32.08,Default,,0,0,0,,这些都很有趣，可能在我们的组织中都必不可少
Dialogue: 0,0:09:32.15,0:09:37.34,Default,,0,0,0,,但是这相对于高质量的软件开发水平来说这不算什么
Dialogue: 0,0:09:37.41,0:09:41.36,Default,,0,0,0,,当我问你，如何判断一段代码是好代码？
Dialogue: 0,0:09:41.76,0:09:46.23,Default,,0,0,0,,很多人只是简单的设置了一些限制
Dialogue: 0,0:09:47.44,0:09:55.96,Default,,0,0,0,,不要使用重载;不要使用异常; 不要使用多重继承; 不要使用运算符重载.... 几乎所有类型的规则都是这样
Dialogue: 0,0:09:56.11,0:10:04.36,Default,,0,0,0,,有一些是好的. 有一些是垃圾. 有些在某些特殊的情况下是好的. 一些却不是.\n真的还有很多误导人的建议
Dialogue: 0,0:10:04.61,0:10:09.77,Default,,0,0,0,,有人告诉你，你真的应该去尝试写一下Java
Dialogue: 0,0:10:09.84,0:10:12.90,Default,,0,0,0,,当你如果真的要写Java，那么你会怎么做？
Dialogue: 0,0:10:12.90,0:10:18.36,Default,,0,0,0,,不要试图阻止C++程序员写好的C++代码
Dialogue: 0,0:10:18.36,0:10:22.91,Default,,0,0,0,,还是"C with classes"吗? 那个概念在1986年确实很酷
Dialogue: 0,0:10:23.04,0:10:25.84,Default,,0,0,0,,但是那是很久以前的事了，大部分人都是之后出生的
Dialogue: 0,0:10:25.84,0:10:36.41,Default,,0,0,0,,还有人认为它应该在K&r被研发出来之后被淘汰
Dialogue: 0,0:10:36.41,0:10:42.09,Default,,0,0,0,,他们可能接受一些关于C++函数原型像是const的几件特性
Dialogue: 0,0:10:42.09,0:10:46.50,Default,,0,0,0,,但是基本上你应该能用C做到
Dialogue: 0,0:10:46.80,0:10:50.35,Default,,0,0,0,,在我看来那是愚蠢的主意，但是我们依然会去做那些事
Dialogue: 0,0:10:50.35,0:10:53.87,Default,,0,0,0,,此外，编码规则一直迭代更新
Dialogue: 0,0:10:53.87,0:11:08.32,Default,,0,0,0,,我看到近几年推荐使用的编码准则，确实真的有很好的准则，它描述如何在约198*年编写好的代码。它还没有被更新，那是很久前的事情了。
Dialogue: 0,0:11:08.45,0:11:10.78,Default,,0,0,0,,于是，他们变成了累赘
Dialogue: 0,0:11:10.78,0:11:23.66,Default,,0,0,0,,大量的代码被专门应用于特定应用程序领域，像我帮他写一套硬实时软件或飞行控制系统
Dialogue: 0,0:11:24.02,0:11:27.25,Default,,0,0,0,,这些都是很好的准则
Dialogue: 0,0:11:27.25,0:11:30.21,Default,,0,0,0,,但是有些人试图把此规则使用在其它领域
Dialogue: 0,0:11:30.21,0:11:38.90,Default,,0,0,0,,而且人们都知道知道，飞行规则是不在起飞之后使用new
Dialogue: 0,0:11:38.90,0:11:41.04,Default,,0,0,0,,和你永远不要使用delete
Dialogue: 0,0:11:41.30,0:11:45.94,Default,,0,0,0,,也许这些都不是最适当的准则
Dialogue: 0,0:11:46.19,0:11:51.40,Default,,0,0,0,,其他某些准则有类似的偏见和约束，人们往往容易忘记他们
Dialogue: 0,0:11:51.78,0:11:55.37,Default,,0,0,0,,也让很多人在很长时间内喘不过气来
Dialogue: 0,0:11:55.37,0:11:59.73,Default,,0,0,0,,你们真的需要去理解一下团队语言规则制定者
Dialogue: 0,0:11:59.73,0:12:04.41,Default,,0,0,0,,我看了看如何在C++中使用指针的规则
Dialogue: 0,0:12:04.41,0:12:10.36,Default,,0,0,0,,我的意思是，看完后当时我很痛苦并不能理解所有这些规则
Dialogue: 0,0:12:10.66,0:12:13.00,Default,,0,0,0,,你不能跟着他们，真的
Dialogue: 0,0:12:13.00,0:12:18.81,Default,,0,0,0,,和大量的准则又没有很好的工具
Dialogue: 0,0:12:19.15,0:12:21.38,Default,,0,0,0,,或者他们有平台依赖性
Dialogue: 0,0:12:21.38,0:12:21.63,Default,,0,0,0,,{\pos(357,499)}da
Dialogue: 0,0:12:21.63,0:12:21.81,Default,,0,0,0,,{\pos(276,477)}da
Dialogue: 0,0:12:21.80,0:12:21.93,Default,,0,0,0,,{\pos(483,425)}da
Dialogue: 0,0:12:21.93,0:12:22.05,Default,,0,0,0,,{\pos(301,424)}da
Dialogue: 0,0:12:22.07,0:12:22.59,Default,,0,0,0,,{\pos(373,400)}da~
Dialogue: 0,0:12:22.77,0:12:24.50,Default,,0,0,0,,以及没有生产指导性
Dialogue: 0,0:12:24.70,0:12:33.68,Default,,0,0,0,,我真的很想强调，告诉人们不要做什么不如告诉人们应该做什么
Dialogue: 0,0:12:33.79,0:12:36.30,Default,,0,0,0,,所以就让我们来做这些很好的编程规范
Dialogue: 0,0:12:36.30,0:12:40.49,Default,,0,0,0,,全面的浏览一下现代C++, 等一会儿
Dialogue: 0,0:12:40.49,0:12:53.04,Default,,0,0,0,,首先，让我们忽略遗留的代码，让我们忽略旧的东西，让我们为我们的代码看起来像是5年到10年内写的
Dialogue: 0,0:12:53.20,0:12:59.06,Default,,0,0,0,,然后我们再来解决如何做好交互，如何做兼容性
Dialogue: 0,0:13:00.36,0:13:03.16,Default,,0,0,0,,逐渐适应是必不可少的
Dialogue: 0,0:13:03.41,0:13:05.26,Default,,0,0,0,,规则是可学习的
Dialogue: 0,0:13:05.29,0:13:11.46,Default,,0,0,0,,C++确实是有一些坏的教学材料
Dialogue: 0,0:13:11.46,0:13:14.22,Default,,0,0,0,,其中一些是很旧的，顽固不化的
Dialogue: 0,0:13:14.29,0:13:19.57,Default,,0,0,0,,通过自我阉割让C++看起来不那么令人讨厌
Dialogue: 0,0:13:19.57,0:13:21.03,Default,,0,0,0,,以及一些类似的事情
Dialogue: 0,0:13:21.18,0:13:26.34,Default,,0,0,0,,所以设置一些准则还可以让从事教育的教师了解如何教学
Dialogue: 0,0:13:26.54,0:13:29.47,Default,,0,0,0,,Flexiable课程. 因为是一个巨大的社区
Dialogue: 0,0:13:29.64,0:13:30.08,Default,,0,0,0,,我的意思是
Dialogue: 0,0:13:30.19,0:13:33.98,Default,,0,0,0,,我们恢复只做一切计算的事情
Dialogue: 0,0:13:34.12,0:13:36.07,Default,,0,0,0,,这当然是不专业的
Dialogue: 0,0:13:36.07,0:13:39.68,Default,,0,0,0,,我们当然不能做这样的限制
Dialogue: 0,0:13:43.28,0:13:46.51,Default,,0,0,0,,也有一些高层次的规则，也有一些低级别的规则
Dialogue: 0,0:13:46.59,0:13:50.57,Default,,0,0,0,,高级别规则的目的是提供一个覆盖一切的概念框架
Dialogue: 0,0:13:50.68,0:13:53.48,Default,,0,0,0,,那些都是非常自然的法则
Dialogue: 0,0:13:53.60,0:13:54.79,Default,,0,0,0,,以及他们都是非常有用的
Dialogue: 0,0:13:54.79,0:14:00.43,Default,,0,0,0,,比方像，你必须在代码中注释 - 虽然编译器却从来不会去管那些注释
Dialogue: 0,0:14:00.52,0:14:08.12,Default,,0,0,0,,你使用ISO 标准 c++, 是的，有理由使用这样的扩展
Dialogue: 0,0:14:08.12,0:14:13.54,Default,,0,0,0,,但是我们不打算处理特殊限制的情况
Dialogue: 0,0:14:13.72,0:14:16.36,Default,,0,0,0,,我们想要安全的静态类型
Dialogue: 0,0:14:17.10,0:14:18.14,Default,,0,0,0,,例如
Dialogue: 0,0:14:18.32,0:14:21.17,Default,,0,0,0,,就是这样一个哲学框架
Dialogue: 0,0:14:21.31,0:14:26.70,Default,,0,0,0,,问题是再次编译和程序也不能真正的了解哲学
Dialogue: 0,0:14:26.90,0:14:35.84,Default,,0,0,0,,它意味着你必须转化为可以在一块程序的上下文中详细地理解和使用的东西
Dialogue: 0,0:14:35.84,0:14:38.54,Default,,0,0,0,,因此，有理由是一大堆的低级规则
Dialogue: 0,0:14:38.79,0:14:43.65,Default,,0,0,0,,基本上你们应该的大规模丢弃功能
Dialogue: 0,0:14:46.26,0:14:52.70,Default,,0,0,0,,低级的规则，比如，使用 T * 来指定单个对象，而不是数组
Dialogue: 0,0:14:52.90,0:14:57.58,Default,,0,0,0,,和喜欢初始化到构造函数中赋值
Dialogue: 0,0:14:57.71,0:15:01.08,Default,,0,0,0,,这些都是很容易检查的
Dialogue: 0,0:15:01.08,0:15:04.18,Default,,0,0,0,,当你违反了规则，那么我们会有工具提示你
Dialogue: 0,0:15:04.24,0:15:06.00,Default,,0,0,0,,总是初始化对象
Dialogue: 0,0:15:06.04,0:15:11.96,Default,,0,0,0,,这几天做的编译器。但它是好的规则，我们也可以做得更好，我们有他们的外部工具
Dialogue: 0,0:15:12.01,0:15:15.29,Default,,0,0,0,,所以基本上，算是体现通过支配世界的方式
Dialogue: 0,0:15:15.66,0:15:22.27,Default,,0,0,0,,和工具为编程提供反馈，它还有助于统一样式
Dialogue: 0,0:15:22.58,0:15:27.34,Default,,0,0,0,,如果我看着一段代码，我看到一个字符串，
Dialogue: 0,0:15:27.34,0:15:30.20,Default,,0,0,0,,如果我知道它的 std::string，我知道很多
Dialogue: 0,0:15:30.37,0:15:34.28,Default,,0,0,0,,它帮助了我，我没有办法再去读手册
Dialogue: 0,0:15:35.51,0:15:47.51,Default,,0,0,0,,所以一个更统一风格才有助于让我快速编写代码，可以帮助我读代码，理解代码
Dialogue: 0,0:15:47.70,0:15:53.94,Default,,0,0,0,,还有一件事你要理解就是规则不一定非要短小或者直白(orthogonal)
Dialogue: 0,0:15:54.23,0:16:01.74,Default,,0,0,0,,作家写作时要花很多时间来缩减文字好省纸
Dialogue: 0,0:16:02.54,0:16:03.79,Default,,0,0,0,,我们不是干这个的
Dialogue: 0,0:16:04.06,0:16:12.33,Default,,0,0,0,,我们是要变得更有帮助，而且有一大套工具来在你越界的时候提示你
Dialogue: 0,0:16:12.88,0:16:16.58,Default,,0,0,0,,单条规则的结构都很简单且有组织
Dialogue: 0,0:16:18.24,0:16:21.46,Default,,0,0,0,,比如"拒绝naked new", 这就是一条规则.
Dialogue: 0,0:16:21.46,0:16:24.65,Default,,0,0,0,,还有引用计数——人们爱引用计数
Dialogue: 0,0:16:24.65,0:16:27.15,Default,,0,0,0,,你也应该可以找到它们
Dialogue: 0,0:16:27.26,0:16:31.62,Default,,0,0,0,,我的意思是你们可以在报错之类的里看到他们
Dialogue: 0,0:16:32.01,0:16:38.49,Default,,0,0,0,,并且永远永远不要毫无理由的禁止或者鼓励人们做某件事
Dialogue: 0,0:16:38.53,0:16:44.15,Default,,0,0,0,,所以一切规则构筑的根基都应该是有理有据的
Dialogue: 0,0:16:44.50,0:16:46.32,Default,,0,0,0,,然后我来举个栗子吧
Dialogue: 0,0:16:46.40,0:16:53.05,Default,,0,0,0,,因为说了这么多抽象的话你们估计也听不懂，得靠举例子
Dialogue: 0,0:16:53.38,0:16:57.70,Default,,0,0,0,,如果你禁止人们做某件事，那你一定要给他们另外的选择
Dialogue: 0,0:16:57.81,0:17:01.12,Default,,0,0,0,,绝不要不给就禁止
Dialogue: 0,0:17:01.84,0:17:03.54,Default,,0,0,0,,说着容易
Dialogue: 0,0:17:03.79,0:17:05.64,Default,,0,0,0,,做着难
Dialogue: 0,0:17:05.70,0:17:10.83,Default,,0,0,0,,这样的规则才有着经历时间考验的价值：
Dialogue: 0,0:17:11.23,0:17:13.55,Default,,0,0,0,,要联系其他事物
Dialogue: 0,0:17:13.55,0:17:18.34,Default,,0,0,0,,要记下我们觉得有用的东西
Dialogue: 0,0:17:18.44,0:17:26.99,Default,,0,0,0,,然后，我们经过长长的讨论来定下上述规则
Dialogue: 0,0:17:27.12,0:17:28.84,Default,,0,0,0,,这样讨论出的产物还很幼稚
Dialogue: 0,0:17:28.91,0:17:30.62,Default,,0,0,0,,但是就是这个概念
Dialogue: 0,0:17:30.73,0:17:40.05,Default,,0,0,0,,有时候你需要更多长篇累牍的解释，需要它们在你的屏幕上显示出来
Dialogue: 0,0:17:40.30,0:17:42.53,Default,,0,0,0,,——所以这就是结构
Dialogue: 0,0:17:42.87,0:17:52.28,Default,,0,0,0,,一个普及的观点是，这个语言的很多子集都失败了
Dialogue: 0,0:17:52.81,0:18:02.73,Default,,0,0,0,,你真正想摆脱的东西，比如指针的误用，还有对继承啦数组啦的不当应用
Dialogue: 0,0:18:02.73,0:18:08.96,Default,,0,0,0,,但如果你一心不让这些问题出现……你也就写不出像样的代码了
Dialogue: 0,0:18:08.96,0:18:11.77,Default,,0,0,0,,没错！老子也想写高质量代码！
Dialogue: 0,0:18:11.95,0:18:19.79,Default,,0,0,0,,但我代码怎么写得这么好呢？？ 我用了厉害的库帮我实现，这些库本身写了底层的代码
Dialogue: 0,0:18:19.79,0:18:24.22,Default,,0,0,0,,因为用其他方法不可能写的高效还可重用
Dialogue: 0,0:18:24.22,0:18:27.55,Default,,0,0,0,,所以，作为子集的语言根本不够用
Dialogue: 0,0:18:27.55,0:18:30.20,Default,,0,0,0,,第一步，我们要有个超集语言
Dialogue: 0,0:18:30.20,0:18:33.52,Default,,0,0,0,,我们有 ISO 规范的 C++
Dialogue: 0,0:18:33.60,0:18:38.99,Default,,0,0,0,,我们有随时可用，也建议使用的标准库
Dialogue: 0,0:18:39.18,0:18:52.81,Default,,0,0,0,,我们还有一种叫规范支持库（gsl.h）的东西，可小了，就两小打类——就这么小！
Dialogue: 0,0:18:53.04,0:18:54.76,Default,,0,0,0,,这么一来，我们就可以说：
Dialogue: 0,0:18:54.76,0:18:57.52,Default,,0,0,0,,乱七八糟的危险的犄角旮旯，不要用
Dialogue: 0,0:18:57.71,0:19:08.54,Default,,0,0,0,,我们已经提供了优雅高效的抽象来不让你走到那一步——对多数人来说，一直都是
Dialogue: 0,0:19:08.54,0:19:13.36,Default,,0,0,0,,一旦你完成那个超集——语言+库
Dialogue: 0,0:19:13.52,0:19:17.04,Default,,0,0,0,,然后你再取子集为己用，趋利避害
Dialogue: 0,0:19:17.18,0:19:24.43,Default,,0,0,0,,这也不是什么新概念，我十年前就写过这方面的文章
Dialogue: 0,0:19:24.60,0:19:32.12,Default,,0,0,0,,so, really what we want is not neutered subset of c++ which is a lot of people that tryed.
Dialogue: 0,0:19:32.12,0:19:35.16,Default,,0,0,0,,we want c++ on steroids on the other hand.
Dialogue: 0,0:19:35.16,0:19:36.97,Default,,0,0,0,,so more of a good stuff.
Dialogue: 0,0:19:37.21,0:19:40.78,Default,,0,0,0,,so the rules rely on the libraries.
Dialogue: 0,0:19:40.88,0:19:43.52,Default,,0,0,0,,you can use any standard libraries of course.
Dialogue: 0,0:19:43.69,0:19:46.91,Default,,0,0,0,,but once we rely on it, things like
Dialogue: 0,0:19:46.91,0:19:50.84,Default,,0,0,0,,standart library class like vector or unique_ptr
Dialogue: 0,0:19:50.84,0:19:59.13,Default,,0,0,0,,and some guideline things array_view -  this is when you have a begining of a sequence and end
Dialogue: 0,0:20:01.08,0:20:05.42,Default,,0,0,0,,not_null - you can say that a pointer shouldn't be null
Dialogue: 0,0:20:05.42,0:20:06.36,Default,,0,0,0,,now get back to that
Dialogue: 0,0:20:06.49,0:20:10.64,Default,,0,0,0,,so there's rules for using the GSL
Dialogue: 0,0:20:10.64,0:20:13.53,Default,,0,0,0,,Never transfer ownership by raw pointer
Dialogue: 0,0:20:14.06,0:20:18.11,Default,,0,0,0,,the idea is if you see a T*, it points to an element.
Dialogue: 0,0:20:18.32,0:20:23.80,Default,,0,0,0,,you are not suppose to delete it, because it just points to an element, somebody ownes it. that's it.
Dialogue: 0,0:20:23.90,0:20:33.00,Default,,0,0,0,,and if you want to have something that can not ever be null and you still want a pointer, you can use not_null of that pointer type.
Dialogue: 0,0:20:33.00,0:20:36.94,Default,,0,0,0,,now, there's rules that encourage you to use higher level abstractions
Dialogue: 0,0:20:37.05,0:20:46.00,Default,,0,0,0,,but these here are choose to show how you can deal with traditional old style code and improve it : don't pass an array as a ingle pointer.
Dialogue: 0,0:20:46.22,0:20:51.29,Default,,0,0,0,,so basically, guess what this could do'
Dialogue: 0,0:20:51.69,0:20:58.28,Default,,0,0,0,,I don't actually think that we can do less than can say double our productivity
Dialogue: 0,0:20:58.28,0:21:03.82,Default,,0,0,0,,this is big claim but I think it can be done
Dialogue: 0,0:21:03.85,0:21:16.11,Default,,0,0,0,,look at a good programmer working on a modern codebase and looking at same programmer working on a 20year old codebase or 10 year old codebase
Dialogue: 0,0:21:16.27,0:21:22.56,Default,,0,0,0,,also look at a median kind of programmer
Dialogue: 0,0:21:22.56,0:21:25.32,Default,,0,0,0,,and see what it taks to become a greate programmer.
Dialogue: 0,0:21:25.37,0:21:27.23,Default,,0,0,0,,you need support you need time
Dialogue: 0,0:21:27.23,0:21:28.59,Default,,0,0,0,,we can lower that time
Dialogue: 0,0:21:28.84,0:21:37.87,Default,,0,0,0,,so, I think we can imitate experienced programers form rule sets that we trying to enforce.
Dialogue: 0,0:21:38.09,0:21:42.38,Default,,0,0,0,,and so we can eliminate huge classes of errors.
Dialogue: 0,0:21:42.38,0:21:45.08,Default,,0,0,0,,so simplification is important
Dialogue: 0,0:21:45.21,0:21:48.22,Default,,0,0,0,,if we can have simpler code, maintance improves.
Dialogue: 0,0:21:48.22,0:21:50.88,Default,,0,0,0,,consistent style speed up learning
Dialogue: 0,0:21:50.99,0:21:57.52,Default,,0,0,0,,and guide people away from the deep dark corners of the law so much
Dialogue: 0,0:21:58.88,0:22:06.70,Default,,0,0,0,,so much programers spend so much of their time looking on the most complicated code and the most complicated rules of the standard
Dialogue: 0,0:22:06.96,0:22:10.30,Default,,0,0,0,,I'm shaking my head, I mean, this hurts!
Dialogue: 0,0:22:10.49,0:22:11.96,Default,,0,0,0,,why do you do it ?!
Dialogue: 0,0:22:12.46,0:22:19.29,Default,,0,0,0,,so I'm emphasis on avoiding waste, that can improve importance
Dialogue: 0,0:22:19.42,0:22:30.12,Default,,0,0,0,,My guess is every large organization/community that's doing this will need to have some special rules for what they are doing
Dialogue: 0,0:22:30.27,0:22:33.13,Default,,0,0,0,,so I'm talking about what I called the "core guidelines"
Dialogue: 0,0:22:33.13,0:22:35.52,Default,,0,0,0,,things that pretentiously help everybody
Dialogue: 0,0:22:35.52,0:22:39.96,Default,,0,0,0,,And I think most of you will want extensions in places.
Dialogue: 0,0:22:40.09,0:22:53.04,Default,,0,0,0,,and some of you will want restructuring tool because there is some one recommended us that it doesn't quite fit in your world or maybe doesn't fit there for the next couple of years till you upgrade your codebase.
Dialogue: 0,0:22:53.04,0:22:55.31,Default,,0,0,0,,and don't compromise performance
Dialogue: 0,0:22:55.31,0:22:58.00,Default,,0,0,0,,performance is a really important aspect
Dialogue: 0,0:22:58.00,0:23:00.06,Default,,0,0,0,,so I don't think I've gone mad
Dialogue: 0,0:23:00.16,0:23:05.56,Default,,0,0,0,,I think we are actually attacking what we known to be the common most serious sources of errors
Dialogue: 0,0:23:05.56,0:23:09.02,Default,,0,0,0,,and get rid of errors
Dialogue: 0,0:23:10.25,0:23:15.44,Default,,0,0,0,,no resource leaks! that's good, we know how to do that!
Dialogue: 0,0:23:15.48,0:23:21.61,Default,,0,0,0,,eliminate dangling pointer - that suppose to be very hard. I'll show you how to do that
Dialogue: 0,0:23:21.90,0:23:28.48,Default,,0,0,0,,eliminate out-of-range access - that can not be done without a few runtime checks
Dialogue: 0,0:23:28.91,0:23:32.12,Default,,0,0,0,,a few!! if you just check everything you are deracinate
Dialogue: 0,0:23:32.12,0:23:37.53,Default,,0,0,0,,but a few can be done and we have some suggestions about that
Dialogue: 0,0:23:37.79,0:23:39.96,Default,,0,0,0,,and Tool support is essential
Dialogue: 0,0:23:39.96,0:23:43.88,Default,,0,0,0,,a lot of this, humans are not very actually good at it
Dialogue: 0,0:23:46.67,0:23:49.23,Default,,0,0,0,,you look at a million lines of code and your eyes glares over.
Dialogue: 0,0:23:49.45,0:23:57.36,Default,,0,0,0,,you check for a paticular kind of error and mistake in a million lines of code, 100 lines of code 10000 lines of code
Dialogue: 0,0:23:57.42,0:24:00.30,Default,,0,0,0,,you get very tired and your concentration wavers.
Dialogue: 0,0:24:00.38,0:24:01.40,Default,,0,0,0,,we neeeed tools
Dialogue: 0,0:24:02.14,0:24:05.71,Default,,0,0,0,,the support library helps by simplify the rules
Dialogue: 0,0:24:05.72,0:24:09.47,Default,,0,0,0,,and a lot of it has to do is reinforcing the type system.
Dialogue: 0,0:24:09.52,0:24:16.73,Default,,0,0,0,,we can do better than we did it in 1978 and 1985
Dialogue: 0,0:24:16.73,0:24:19.76,Default,,0,0,0,,so let's look at the core, the core rules.
Dialogue: 0,0:24:21.10,0:24:29.00,Default,,0,0,0,,we have to start somewhere, so gradual adaption will be the way most of us will go on.
Dialogue: 0,0:24:29.00,0:24:36.76,Default,,0,0,0,,if we write some brand new code from scratch, not using anybody else's libraries. then you can probably follow all the rules today.
Dialogue: 0,0:24:37.08,0:24:39.32,Default,,0,0,0,,that doesn't happen very often.
Dialogue: 0,0:24:39.52,0:24:42.46,Default,,0,0,0,,so I see gradual adaption be necessary.
Dialogue: 0,0:24:42.91,0:24:47.05,Default,,0,0,0,,and therefore core of the core rules
Dialogue: 0,0:24:47.08,0:24:52.09,Default,,0,0,0,,No leaks, No dangling pointers, No type violations through pointers at all!
Dialogue: 0,0:24:52.46,0:24:55.72,Default,,0,0,0,,we know how to avoid leaks.
Dialogue: 0,0:24:55.88,0:25:00.99,Default,,0,0,0,,we just root every object in a scope
Dialogue: 0,0:25:00.99,0:25:04.48,Default,,0,0,0,,RAII kind of standard containers
Dialogue: 0,0:25:04.48,0:25:09.60,Default,,0,0,0,,new and delete disappear into the abstractions
Dialogue: 0,0:25:09.60,0:25:14.49,Default,,0,0,0,,this is nice. when I see "delete" in application code, there must be bugs somewhere.
Dialogue: 0,0:25:15.04,0:25:15.69,Default,,0,0,0,,why?
Dialogue: 0,0:25:15.69,0:25:19.96,Default,,0,0,0,,because if there is one delete, there probably should be more.
Dialogue: 0,0:25:19.96,0:25:23.58,Default,,0,0,0,,and there are probably been too many.
Dialogue: 0,0:25:23.58,0:25:29.42,Default,,0,0,0,,so new/delete disappear into classes
Dialogue: 0,0:25:29.95,0:25:35.74,Default,,0,0,0,,when you see a "new" in application code, you think there must be a problem here.
Dialogue: 0,0:25:35.88,0:25:41.76,Default,,0,0,0,,because if there's a new there should be a delete somewhere, and if there's delete somewhere and we know from experience we made mistakes.
Dialogue: 0,0:25:42.11,0:25:44.48,Default,,0,0,0,,so we don't do that.
Dialogue: 0,0:25:44.62,0:25:48.76,Default,,0,0,0,,this leads us to what I think is a worse nightmare problem.
Dialogue: 0,0:25:49.60,0:25:50.99,Default,,0,0,0,,dangling pointers
Dialogue: 0,0:25:51.13,0:25:52.80,Default,,0,0,0,,and this are so easy to get to.
Dialogue: 0,0:25:52.86,0:25:58.73,Default,,0,0,0,,here we have a function "f" that you give it a pointer and it deletes.
Dialogue: 0,0:25:58.94,0:26:00.81,Default,,0,0,0,,so you deleted that pointer.
Dialogue: 0,0:26:02.04,0:26:04.24,Default,,0,0,0,,that might be right or might be wrong.
Dialogue: 0,0:26:04.51,0:26:08.76,Default,,0,0,0,,my rulers on it, it's very suspect because it is deleting application code.
Dialogue: 0,0:26:09.18,0:26:12.46,Default,,0,0,0,,here is "g" makes an object, calls f.
Dialogue: 0,0:26:12.76,0:26:20.62,Default,,0,0,0,,and then it uses q which happens to be the pointing the the object that was deleted in f.
Dialogue: 0,0:26:20.80,0:26:23.23,Default,,0,0,0,,this is how you scram your memory
Dialogue: 0,0:26:23.44,0:26:26.78,Default,,0,0,0,,the rules will make sure that you don't do this.
Dialogue: 0,0:26:26.88,0:26:31.65,Default,,0,0,0,,and it'll take care of some of the most shroud and difficult find bugs
Dialogue: 0,0:26:32.18,0:26:39.16,Default,,0,0,0,,and we have to do this because if we don't we can damage type safety.
Dialogue: 0,0:26:39.33,0:26:41.54,Default,,0,0,0,,I say this object is an integer
Dialogue: 0,0:26:42.29,0:26:44.16,Default,,0,0,0,,you do this example
Dialogue: 0,0:26:44.29,0:26:49.33,Default,,0,0,0,,and the object might integer are laies at place where your object wasn't, you scramble it.
Dialogue: 0,0:26:49.76,0:26:52.14,Default,,0,0,0,,Memory safety of course.
Dialogue: 0,0:26:52.15,0:26:55.14,Default,,0,0,0,,because we are not using memory as if it is clear
Dialogue: 0,0:26:55.36,0:27:03.35,Default,,0,0,0,,and Resource safety is compromise because you can destory things that are laying around there.
Dialogue: 0,0:27:03.94,0:27:06.48,Default,,0,0,0,,double delete and no deletes
Dialogue: 0,0:27:06.54,0:27:13.33,Default,,0,0,0,,we have to solve this problem to get type safety to get resource safety.
Dialogue: 0,0:27:13.78,0:27:18.88,Default,,0,0,0,,we're going to eliminate this by combination of rules
Dialogue: 0,0:27:19.01,0:27:20.04,Default,,0,0,0,,I mean eliminated
Dialogue: 0,0:27:20.08,0:27:20.92,Default,,0,0,0,,get rid of it
Dialogue: 0,0:27:21.05,0:27:22.40,Default,,0,0,0,,
Dialogue: 0,0:27:22.87,0:27:26.26,Default,,0,0,0,,we distinguish owners from non-owners
Dialogue: 0,0:27:26.27,0:27:30.78,Default,,0,0,0,,if I have a pointer, am I suppose to delete it or not? NO!
Dialogue: 0,0:27:31.30,0:27:34.27,Default,,0,0,0,,asure raw pointers to be non-owners!
Dialogue: 0,0:27:34.27,0:27:45.28,Default,,0,0,0,,we have many pointers in our programs, far too many, but let's asure they are all innocent, they just point to an object, they are not suppose to be a ownership
Dialogue: 0,0:27:45.60,0:27:55.60,Default,,0,0,0,,Catch all attempts for a pointer to "escape" into a scope that is outside a scope of what it points to.
Dialogue: 0,0:27:55.62,0:27:57.13,Default,,0,0,0,,fairly simple
Dialogue: 0,0:27:57.39,0:28:01.32,Default,,0,0,0,,anything that holds an owner is consider an owner
Dialogue: 0,0:28:01.42,0:28:03.53,Default,,0,0,0,,so all of this works recursively
Dialogue: 0,0:28:03.69,0:28:05.89,Default,,0,0,0,,so this is simple rule.
Dialogue: 0,0:28:05.98,0:28:09.24,Default,,0,0,0,,we have some pointers, they point to an object
Dialogue: 0,0:28:10.32,0:28:13.36,Default,,0,0,0,,that object is held alive by an owner
Dialogue: 0,0:28:13.83,0:28:15.30,Default,,0,0,0,,this works recursively
Dialogue: 0,0:28:15.30,0:28:18.32,Default,,0,0,0,,the object happens to have an owner pointer inside it
Dialogue: 0,0:28:18.54,0:28:24.38,Default,,0,0,0,,thus we have constructors and distructors. constructors to construct, distructors to clean up.
Dialogue: 0,0:28:24.61,0:28:37.43,Default,,0,0,0,,what we really have to avoid is that pointer there. that has been passed below the object owner in the stack so when we delete the owner the object is not there and people are still refering to it.
Dialogue: 0,0:28:37.52,0:28:44.90,Default,,0,0,0,,this must never happen so we can asure that. so long long way to eliminate (dangling) pointers.
Dialogue: 0,0:28:45.03,0:28:46.42,Default,,0,0,0,,this is not new rule
Dialogue: 0,0:28:46.63,0:28:50.85,Default,,0,0,0,,if you look at the standard it suggest you should not do that because it's undefined behavior
Dialogue: 0,0:28:51.07,0:28:53.35,Default,,0,0,0,,the point is how do we actully get there.
Dialogue: 0,0:28:53.90,0:28:58.41,Default,,0,0,0,,so here is dangling pointers thing again
Dialogue: 0,0:28:58.99,0:29:01.83,Default,,0,0,0,,first of all the rule will catch the delete p.
Dialogue: 0,0:29:02.12,0:29:10.42,Default,,0,0,0,,you had a innocent looking pointer X* that is not an owner. so the rules will tell you not to do that.
Dialogue: 0,0:29:10.88,0:29:14.45,Default,,0,0,0,,tools that enforce the rules will tell you that is bad
Dialogue: 0,0:29:14.71,0:29:17.26,Default,,0,0,0,,you go back to the "g"
Dialogue: 0,0:29:17.58,0:29:22.35,Default,,0,0,0,,it says, well, "new X" obviously produces an owner.
Dialogue: 0,0:29:22.44,0:29:29.14,Default,,0,0,0,,so assigning it to a plain old pointer is going to be wrong.
Dialogue: 0,0:29:29.14,0:29:32.09,Default,,0,0,0,,because this could lead to a leak
Dialogue: 0,0:29:32.31,0:29:39.62,Default,,0,0,0,,if fact it is also .. if do that will lead you to problems with exceptions, is another matter.
Dialogue: 0,0:29:39.78,0:29:48.57,Default,,0,0,0,,we'll never get down to the problem because you are already been traped by those simple rules twice.
Dialogue: 0,0:29:49.64,0:29:56.73,Default,,0,0,0,,so we can look at how we represent the ownership.
Dialogue: 0,0:29:57.12,0:30:05.50,Default,,0,0,0,,you can mark every owning pointer as owner
Dialogue: 0,0:30:05.92,0:30:09.15,Default,,0,0,0,,for a long time I think we need a bit to do that
Dialogue: 0,0:30:09.52,0:30:16.06,Default,,0,0,0,,that sort of dynamic module that took every pointer and mark it if owner or not.
Dialogue: 0,0:30:16.45,0:30:22.78,Default,,0,0,0,,I had modules like that before I put and saying whether it's a const or not , things like that
Dialogue: 0,0:30:22.88,0:30:24.64,Default,,0,0,0,,the point is it's useless!
Dialogue: 0,0:30:24.76,0:30:30.41,Default,,0,0,0,,It is very good for thinking about problems but it is useless for actually doing it
Dialogue: 0,0:30:30.41,0:30:36.89,Default,,0,0,0,,because, well, it cost time|space to have that extra bit, or time&space.
Dialogue: 0,0:30:37.07,0:30:47.47,Default,,0,0,0,,It means that the code that uses such smart pointers flat pointers as such are no longer ABI compatible with the existing code.
Dialogue: 0,0:30:47.66,0:30:52.16,Default,,0,0,0,,it runs slower than ordinary C or C++.
Dialogue: 0,0:30:52.28,0:30:53.64,Default,,0,0,0,,that's not acceptable
Dialogue: 0,0:30:53.96,0:30:56.50,Default,,0,0,0,,and we have to rewrite our own code for it
Dialogue: 0,0:30:56.53,0:31:10.50,Default,,0,0,0,,so the idea is that you just have a type system owner that static analysis tools can use.
Dialogue: 0,0:31:10.59,0:31:15.20,Default,,0,0,0,,when I talk about pointers I mean anything that can point to an object.
Dialogue: 0,0:31:15.25,0:31:23.52,Default,,0,0,0,,if we can handle it for pointers, we can handle it for everything, references, containers, smart pointers and things like that.
Dialogue: 0,0:31:27.39,0:31:30.26,Default,,0,0,0,,we are going to eliminate all dangling pointers.
Dialogue: 0,0:31:34.32,0:31:37.35,Default,,0,0,0,,oh yeah, down on the broader you can see the definition of an owner.
Dialogue: 0,0:31:37.39,0:31:40.06,Default,,0,0,0,,just as alien, we mark it as an owner
Dialogue: 0,0:31:40.43,0:31:44.00,Default,,0,0,0,,humans can read it, tools can read it
Dialogue: 0,0:31:44.45,0:31:46.06,Default,,0,0,0,,but your linker doesn't care.
Dialogue: 0,0:31:46.19,0:31:49.28,Default,,0,0,0,,so everything is working as before.
Dialogue: 0,0:31:49.39,0:31:51.00,Default,,0,0,0,,so here is how we can use it.
Dialogue: 0,0:31:51.00,0:32:02.10,Default,,0,0,0,,we can use an owner to improve our implementations of higher level abstractions, we want to use high level abstractions like vector and static array.
Dialogue: 0,0:32:02.22,0:32:12.55,Default,,0,0,0,,and we just mark that, in paticuler cases one of the 3 pointers inside the implementation of the vector is an ower and the other two aren't.
Dialogue: 0,0:32:12.80,0:32:16.76,Default,,0,0,0,,that's the owner, keep it alive, the others just pointing to it
Dialogue: 0,0:32:16.82,0:32:19.63,Default,,0,0,0,,that sort of the general you should see a lot.
Dialogue: 0,0:32:19.85,0:32:26.45,Default,,0,0,0,,and only if we are dealing with pointers directly do we use owners
Dialogue: 0,0:32:26.46,0:32:45.31,Default,,0,0,0,,so there's "f()" that taks an owner, and then trying to call it. I call it with an owner, that'll transfer ownership; I call it with non-owner,that's bad. I delete one of the owners, that's good; delete something that's not an owner, that't bad, we can catch.
Dialogue: 0,0:32:45.56,0:32:54.34,Default,,0,0,0,,and this is just marking, the static analysis tool will tell you when you did something that wasn't good.
Dialogue: 0,0:32:54.34,0:32:58.59,Default,,0,0,0,,an owner has to transfer to someone else or delete it.
Dialogue: 0,0:32:59.69,0:33:04.03,Default,,0,0,0,,the code will check whether you do it (or not) that's it.
Dialogue: 0,0:33:04.82,0:33:06.73,Default,,0,0,0,,and owners are low-leve mechanism.
Dialogue: 0,0:33:06.73,0:33:09.40,Default,,0,0,0,,you don't want to feddle with that all the time.
Dialogue: 0,0:33:09.56,0:33:12.22,Default,,0,0,0,,but having owner allows you to do two things
Dialogue: 0,0:33:12.30,0:33:19.29,Default,,0,0,0,,it provides the support for the implemention of high level abstrastions
Dialogue: 0,0:33:12.30,0:33:19.29,Default,,0,0,0,,it allows you to implement high level abstrastions
Dialogue: 0,0:33:19.29,0:33:25.47,Default,,0,0,0,,c++ are a language where you can design your own container, you can design your own smart pointers, etc
Dialogue: 0,0:33:25.70,0:33:30.33,Default,,0,0,0,,now you get a little bit support in how to express this.
Dialogue: 0,0:33:30.33,0:33:32.70,Default,,0,0,0,,and not make so many mistakes when you do it.
Dialogue: 0,0:33:32.83,0:33:35.53,Default,,0,0,0,,and further more as ABIs
Dialogue: 0,0:33:35.56,0:33:44.88,Default,,0,0,0,,somebody really says that they want any *, er, you don't have to give up all your checking to be able to use that ABI.
Dialogue: 0,0:33:49.41,0:33:51.60,Default,,0,0,0,,What else do we have to do?
Dialogue: 0,0:33:51.61,0:33:54.90,Default,,0,0,0,,we can handle owner ship now we have to handle dangling
Dialogue: 0,0:34:00.49,0:34:05.50,Default,,0,0,0,,Don't transfer to pointer to a local to where it could be accessed by a caller.
Dialogue: 0,0:34:07.31,0:34:09.42,Default,,0,0,0,,ok, let's look at the example there.
Dialogue: 0,0:34:09.54,0:34:12.24,Default,,0,0,0,,I am returning something.
Dialogue: 0,0:34:12.28,0:34:14.78,Default,,0,0,0,,I neither return a pointer to a local.
Dialogue: 0,0:34:14.99,0:34:17.25,Default,,0,0,0,,not a good idea, we all know that.
Dialogue: 0,0:34:17.25,0:34:22.74,Default,,0,0,0,,compiler are able to catch it more or less consistently for the last 20 years.
Dialogue: 0,0:34:23.01,0:34:28.98,Default,,0,0,0,,then I'm returnning a pointer to something I just created on the free-store.
Dialogue: 0,0:34:28.98,0:34:30.26,Default,,0,0,0,,that's fine.
Dialogue: 0,0:34:30.26,0:34:33.46,Default,,0,0,0,,at least it's sortof fine becauseIt didn't mark it as owner.
Dialogue: 0,0:34:33.47,0:34:37.41,Default,,0,0,0,,but as far as dangling pointers,it's not going to dangle.
Dialogue: 0,0:34:37.41,0:34:41.41,Default,,0,0,0,,and finnaly, there's a pointer that is given to me
Dialogue: 0,0:34:41.41,0:34:44.84,Default,,0,0,0,,then obviously I can give it back because it came from my caller.
Dialogue: 0,0:34:45.14,0:34:48.89,Default,,0,0,0,,those are roughly only 3 cases we can handle that.
Dialogue: 0,0:34:49.18,0:34:56.46,Default,,0,0,0,,we can stop pointers from escaping down to the bottom of the stack and out live the owner.
Dialogue: 0,0:34:56.99,0:35:06.44,Default,,0,0,0,,so catches all kinds of the things , pointers references etc and that's so fine
Dialogue: 0,0:35:06.49,0:35:13.69,Default,,0,0,0,,so, we need to classify acording to owner ship to work here.
Dialogue: 0,0:35:13.76,0:35:17.21,Default,,0,0,0,,because, look at the f() there.
Dialogue: 0,0:35:17.52,0:35:21.30,Default,,0,0,0,,it returns a vector of integers
Dialogue: 0,0:35:21.53,0:35:35.44,Default,,0,0,0,,and inside that vector of integers we put something that's an owner, something that's a pointer to a local and something we got from our caller
Dialogue: 0,0:35:35.92,0:35:41.82,Default,,0,0,0,,this... we can't handle the ownership, it just mixed.
Dialogue: 0,0:35:42.44,0:35:45.02,Default,,0,0,0,,that's bad code.
Dialogue: 0,0:35:45.08,0:35:46.88,Default,,0,0,0,,it's asking for touble.
Dialogue: 0,0:35:46.97,0:35:49.30,Default,,0,0,0,,it'll be rejected for mixing it.
Dialogue: 0,0:35:49.89,0:36:00.76,Default,,0,0,0,,in code we would have to try and deal with it and we can't
Dialogue: 0,0:36:00.76,0:36:03.45,Default,,0,0,0,,because clearly the ownership became mixed.
Dialogue: 0,0:36:03.54,0:36:07.60,Default,,0,0,0,,and when we passed it out, all the information about who shoud delete what has gone
Dialogue: 0,0:36:07.64,0:36:29.17,Default,,0,0,0,,the only way of doing that is actually to hav something like big vector of (what) that should tell you which should be deleted or you can sort of hope you can change into unique_ptr so that preseve the ownership.
Dialogue: 0,0:36:29.17,0:36:34.42,Default,,0,0,0,,don't mix ownership in containers!
Dialogue: 0,0:36:34.52,0:36:38.70,Default,,0,0,0,,bacause in corrent code it doesn't work too well.
Dialogue: 0,0:36:40.85,0:36:42.84,Default,,0,0,0,,in this code it'll be caught.
Dialogue: 0,0:36:43.55,0:36:48.26,Default,,0,0,0,,so let's course many other ways of mis-using pointers and such.
Dialogue: 0,0:36:48.26,0:36:51.38,Default,,0,0,0,,range errors, dereferencing nullptr
Dialogue: 0,0:36:51.88,0:36:57.22,Default,,0,0,0,,I'm going to go little bit about that
Dialogue: 0,0:36:57.57,0:37:03.37,Default,,0,0,0,,and I notice that there's a copy of printable here
Dialogue: 0,0:37:03.48,0:37:07.24,Default,,0,0,0,,some of the rules are meanable to static analysis.
Dialogue: 0,0:37:07.30,0:37:13.41,Default,,0,0,0,,some of them are meanable to sort of high G you can look at and give it as guidelines
Dialogue: 0,0:37:13.52,0:37:16.57,Default,,0,0,0,,and some of them really accquire runtime checks.
Dialogue: 0,0:37:16.76,0:37:20.11,Default,,0,0,0,,we want to minimize runtime checks because we want to run fast.
Dialogue: 0,0:37:20.89,0:37:29.47,Default,,0,0,0,,so here is one of the tools that we are providing - it's similar to the proposals in standard committee.
Dialogue: 0,0:37:29.49,0:37:39.12,Default,,0,0,0,,this one here, we'll do re-write, we have for some reason I don't understand at. the array view will be proposed in standard as read-only structure.
Dialogue: 0,0:37:39.66,0:37:41.22,Default,,0,0,0,,but anyway, here.
Dialogue: 0,0:37:41.32,0:37:42.88,Default,,0,0,0,,we have a common style
Dialogue: 0,0:37:42.97,0:37:47.21,Default,,0,0,0,,we call with a pointer and a count
Dialogue: 0,0:37:47.39,0:37:49.93,Default,,0,0,0,,this is my least favorite kind of interface
Dialogue: 0,0:37:50.05,0:37:53.32,Default,,0,0,0,,least favorite, because it is so error prone.
Dialogue: 0,0:37:53.32,0:37:56.20,Default,,0,0,0,,and least favorite because it is so common.
Dialogue: 0,0:37:56.44,0:37:58.19,Default,,0,0,0,,so a lot of errors there.
Dialogue: 0,0:37:58.27,0:38:01.25,Default,,0,0,0,,so I assign 9 to a[7].
Dialogue: 0,0:38:01.57,0:38:02.73,Default,,0,0,0,,it that ok?
Dialogue: 0,0:38:02.99,0:38:04.56,Default,,0,0,0,,we have no ways of knowing!
Dialogue: 0,0:38:04.56,0:38:06.56,Default,,0,0,0,,the information is not there
Dialogue: 0,0:38:06.99,0:38:13.80,Default,,0,0,0,,and I can make a loop,  let's hope a really was the count
Dialogue: 0,0:38:13.96,0:38:16.49,Default,,0,0,0,,and we hope the count was right, that's fine.
Dialogue: 0,0:38:16.73,0:38:19.96,Default,,0,0,0,,so instead, we provide you an abstraction that's array_view.
Dialogue: 0,0:38:20.14,0:38:23.94,Default,,0,0,0,,a begining that can browse integers, doesn't matter
Dialogue: 0,0:38:24.09,0:38:31.52,Default,,0,0,0,,there. you could check the runtime if you wanted to that a[7] is valid
Dialogue: 0,0:38:31.77,0:38:35.32,Default,,0,0,0,,and if you don't want the checks. we can only have it on debug mode
Dialogue: 0,0:38:35.50,0:38:41.64,Default,,0,0,0,,we can now write range-for loop that will work.
Dialogue: 0,0:38:41.90,0:38:48.01,Default,,0,0,0,,notice that there is not int n to get wrong and the code get simplified and is become more checkable
Dialogue: 0,0:38:48.01,0:38:50.97,Default,,0,0,0,,we are lifting the abstraction just a little bit.
Dialogue: 0,0:38:51.15,0:38:54.28,Default,,0,0,0,,and so we can look at some calls there.
Dialogue: 0,0:38:54.51,0:38:57.79,Default,,0,0,0,,I call it for a[100]
Dialogue: 0,0:38:57.86,0:39:00.28,Default,,0,0,0,,I have to say a and 100.
Dialogue: 0,0:39:00.28,0:39:05.30,Default,,0,0,0,,even though I have told there are 100 elements in a.
Dialogue: 0,0:39:05.60,0:39:13.29,Default,,0,0,0,,and if I finger flipson the keyborad and I write a 1000,  all kinds of bad things will happen
Dialogue: 0,0:39:14.39,0:39:17.09,Default,,0,0,0,,if it's a variable it gets more interesting
Dialogue: 0,0:39:17.19,0:39:18.84,Default,,0,0,0,,for array_view
Dialogue: 0,0:39:20.02,0:39:20.64,Default,,0,0,0,,well
Dialogue: 0,0:39:20.80,0:39:25.92,Default,,0,0,0,,you can just say it was an array_view or you can rely on the conversion  of an array to an array_view
Dialogue: 0,0:39:26.14,0:39:32.40,Default,,0,0,0,,it just socks on that array, makes it into array_view, having the size deduced
Dialogue: 0,0:39:32.88,0:39:36.85,Default,,0,0,0,,if you are going to call it on a value.
Dialogue: 0,0:39:37.12,0:39:45.99,Default,,0,0,0,,it's fairly easy to check agains the array of values there, if not you are on errors as often,
Dialogue: 0,0:39:46.15,0:39:50.80,Default,,0,0,0,,so this follows the idea of make simple things simple
Dialogue: 0,0:39:51.09,0:39:55.83,Default,,0,0,0,,and array_view is roughly the same as  (int*p,int n);
Dialogue: 0,0:39:56.13,0:39:59.91,Default,,0,0,0,,but we can use it easier and make few mistakes.
Dialogue: 0,0:40:00.84,0:40:06.49,Default,,0,0,0,,nullptr. deal with it simply by saying what we mean.
Dialogue: 0,0:40:06.61,0:40:09.78,Default,,0,0,0,,the problem is , today , we don't say what we mean.
Dialogue: 0,0:40:09.85,0:40:12.21,Default,,0,0,0,,I have f(char*)
Dialogue: 0,0:40:12.74,0:40:15.60,Default,,0,0,0,,is it alright to call it with nullptr ?
Dialogue: 0,0:40:16.37,0:40:17.78,Default,,0,0,0,,where does it say so?
Dialogue: 0,0:40:18.16,0:40:20.58,Default,,0,0,0,,in the documentation, OK.
Dialogue: 0,0:40:20.84,0:40:26.05,Default,,0,0,0,,compiler don't read document and neither do I  when I hear it
Dialogue: 0,0:40:26.16,0:40:27.17,Default,,0,0,0,,not a good thing.
Dialogue: 0,0:40:27.41,0:40:29.21,Default,,0,0,0,,when I implementing f().
Dialogue: 0,0:40:29.27,0:40:33.08,Default,,0,0,0,,should I turst my users (that they will) follow the rules or not?
Dialogue: 0,0:40:33.69,0:40:34.95,Default,,0,0,0,,should I test (against parameter)?
Dialogue: 0,0:40:36.65,0:40:38.04,Default,,0,0,0,,if I test, I test too much
Dialogue: 0,0:40:38.04,0:40:40.51,Default,,0,0,0,,because that's a waste of resources.
Dialogue: 0,0:40:40.52,0:40:42.39,Default,,0,0,0,,If I test too little, it'll crash.
Dialogue: 0,0:40:42.49,0:40:45.09,Default,,0,0,0,,there're all kinds of things about that.
Dialogue: 0,0:40:45.09,0:40:48.31,Default,,0,0,0,,so, one way to dealing with it is that we use not_null.
Dialogue: 0,0:40:48.37,0:40:53.11,Default,,0,0,0,,currently that's a class that will test whether it's null or not.
Dialogue: 0,0:40:53.25,0:40:57.01,Default,,0,0,0,,but a lot of it can be eliminated and can be debug only.
Dialogue: 0,0:40:57.09,0:41:02.01,Default,,0,0,0,,so if nullptr is an error it toke f(not_null<char*>)
Dialogue: 0,0:41:02.32,0:41:12.05,Default,,0,0,0,,and little bit saddle here. if you pass a variable that is not a pointer. that requires checking
Dialogue: 0,0:41:12.31,0:41:17.68,Default,,0,0,0,,but now we write f() we don't need to do the checking
Dialogue: 0,0:41:17.89,0:41:27.71,Default,,0,0,0,,so it's simplier and more class. it makes the code more explict, it detects a paticular specific well known problem.
Dialogue: 0,0:41:28.07,0:41:32.00,Default,,0,0,0,,thers's many ways to the tagging most problem this is the one way we choose for those.
Dialogue: 0,0:41:32.29,0:41:35.37,Default,,0,0,0,,so we go after bugs
Dialogue: 0,0:41:35.43,0:41:37.97,Default,,0,0,0,,we provide type and resource safety
Dialogue: 0,0:41:38.34,0:41:44.60,Default,,0,0,0,,now we can go after other problems
Dialogue: 0,0:41:44.61,0:41:45.47,Default,,0,0,0,,logic errors
Dialogue: 0,0:41:45.47,0:41:47.69,Default,,0,0,0,,performance bugs, maintenance hassles
Dialogue: 0,0:41:47.69,0:41:49.57,Default,,0,0,0,,there are rules going there.
Dialogue: 0,0:41:49.57,0:41:55.01,Default,,0,0,0,,but there are not as complete as things for extending the type-system.
Dialogue: 0,0:41:55.22,0:42:03.21,Default,,0,0,0,,one thing we noticed is that there is a lot of over use of smart pointers.
Dialogue: 0,0:42:03.21,0:42:10.16,Default,,0,0,0,,i noticed a lot of shared_ptr been used simply to return a value from a function
Dialogue: 0,0:42:10.87,0:42:18.77,Default,,0,0,0,,so the use count goes from zero to 1 and 1 to 2 and 2 to 1 and to 0
Dialogue: 0,0:42:18.77,0:42:28.40,Default,,0,0,0,,and all we did is to get something transferd simply because people didn't trust ordinary pointers
Dialogue: 0,0:42:28.40,0:42:33.23,Default,,0,0,0,,quiet resonably so because all ordinary pointers might dangle
Dialogue: 0,0:42:34.18,0:42:35.51,Default,,0,0,0,,wait a minite!
Dialogue: 0,0:42:35.71,0:42:37.34,Default,,0,0,0,,we just solved that problem!
Dialogue: 0,0:42:37.34,0:42:41.32,Default,,0,0,0,,so we have to re-think the way we're using smart pointers
Dialogue: 0,0:42:41.32,0:42:43.08,Default,,0,0,0,,shared_ptr in paticular
Dialogue: 0,0:42:43.31,0:42:45.65,Default,,0,0,0,,and my feeling is that they over used it.
Dialogue: 0,0:42:45.80,0:42:51.20,Default,,0,0,0,,a lot of protection in shared_ptr when used int that way is just a overhead.
Dialogue: 0,0:42:51.29,0:42:58.32,Default,,0,0,0,,because once the bugs have gone you don't have to have the use count anymore.
Dialogue: 0,0:42:58.32,0:43:02.40,Default,,0,0,0,,but it sits there forever counting what ever you called and passed a smart pointer
Dialogue: 0,0:43:02.85,0:43:05.22,Default,,0,0,0,,{\s1}with smart pointers{\s0}
Dialogue: 0,0:43:05.50,0:43:12.40,Default,,0,0,0,,with dangling pointers eliminated by tools you don't need to do that.
Dialogue: 0,0:43:12.53,0:43:15.40,Default,,0,0,0,,I'm going to show a little bit about it.
Dialogue: 0,0:43:15.77,0:43:21.05,Default,,0,0,0,,so here are the alternatives, in the standard we can take a T*
Dialogue: 0,0:43:22.69,0:43:24.95,Default,,0,0,0,,doesn't deal with ownership just a pointer
Dialogue: 0,0:43:25.13,0:43:26.41,Default,,0,0,0,,just use the pointer
Dialogue: 0,0:43:26.66,0:43:27.97,Default,,0,0,0,,with the rules here.
Dialogue: 0,0:43:28.04,0:43:33.32,Default,,0,0,0,,we know that f(T*) will not delete T.
Dialogue: 0,0:43:33.45,0:43:35.85,Default,,0,0,0,,the rules will stop that
Dialogue: 0,0:43:36.04,0:43:38.03,Default,,0,0,0,,it just point to something
Dialogue: 0,0:43:38.56,0:43:42.68,Default,,0,0,0,,if we want to transfer ownership we can use unique_ptr
Dialogue: 0,0:43:42.85,0:43:44.95,Default,,0,0,0,,if we really want to share ownership
Dialogue: 0,0:43:45.17,0:43:47.70,Default,,0,0,0,,we can use shared_ptr
Dialogue: 0,0:43:48.06,0:43:55.05,Default,,0,0,0,,but if we look at the T* it is familer, it's very general.
Dialogue: 0,0:43:55.47,0:44:00.29,Default,,0,0,0,,if I have shared_ptr, I can take the pointer out of it and give it to f();
Dialogue: 0,0:44:00.48,0:44:02.95,Default,,0,0,0,,I don't have to do anything fancy.
Dialogue: 0,0:44:03.30,0:44:05.53,Default,,0,0,0,,no dangling pointers
Dialogue: 0,0:44:05.79,0:44:13.32,Default,,0,0,0,,and think about pointers degenerate things and it works
Dialogue: 0,0:44:13.64,0:44:15.69,Default,,0,0,0,,so here is an example
Dialogue: 0,0:44:16.19,0:44:21.97,Default,,0,0,0,,if g() and h() has been written using different kinds of pointers
Dialogue: 0,0:44:22.36,0:44:30.49,Default,,0,0,0,,if I make it, f(shared_ptr<X>), if I make a shared_ptr<X> with make_shared<X>
Dialogue: 0,0:44:30.78,0:44:35.78,Default,,0,0,0,,then to call f(), I have to get the pointer
Dialogue: 0,0:44:35.88,0:44:43.10,Default,,0,0,0,,if I'm calling g(), we have the overhead of using pointers
Dialogue: 0,0:44:43.21,0:44:54.73,Default,,0,0,0,,and the h() I really have to modify. because if I pass the ownership in, I have to pass it out again unless I want it to be destoryed in h()
Dialogue: 0,0:44:54.81,0:44:57.22,Default,,0,0,0,,so we can keep things simpler now
Dialogue: 0,0:44:57.44,0:45:02.19,Default,,0,0,0,,simply use f(X*) as we always did.
Dialogue: 0,0:45:03.71,0:45:09.39,Default,,0,0,0,,one question I've had quiet resonably is would the rules be enforced by a compiler?
Dialogue: 0,0:45:09.84,0:45:12.15,Default,,0,0,0,,some could, some can't
Dialogue: 0,0:45:12.72,0:45:15.91,Default,,0,0,0,,on the other hand, I would like to use thiese rules now.
Dialogue: 0,0:45:16.14,0:45:19.55,Default,,0,0,0,,And I would like to use for all of the compilers
Dialogue: 0,0:45:19.69,0:45:28.61,Default,,0,0,0,,so, yes, it'll be nice if the compiler would use some of these rules
Dialogue: 0,0:45:28.67,0:45:29.24,Default,,0,0,0,,but
Dialogue: 0,0:45:29.76,0:45:32.62,Default,,0,0,0,,please be careful don't have false positives
Dialogue: 0,0:45:32.62,0:45:34.07,Default,,0,0,0,,people hate false positives
Dialogue: 0,0:45:34.07,0:45:35.91,Default,,0,0,0,,and that destoryes the whole system
Dialogue: 0,0:45:36.43,0:45:38.64,Default,,0,0,0,,because people does surprising things
Dialogue: 0,0:45:38.84,0:45:40.34,Default,,0,0,0,,and not worrying it
Dialogue: 0,0:45:40.41,0:45:41.67,Default,,0,0,0,,and further more
Dialogue: 0,0:45:41.78,0:45:48.00,Default,,0,0,0,,an external tool is not just useful accross the span of compilers
Dialogue: 0,0:45:48.57,0:45:52.69,Default,,0,0,0,,it also can tolerate a few more false positives
Dialogue: 0,0:45:53.07,0:45:59.46,Default,,0,0,0,,and it can handle changes more easily
Dialogue: 0,0:46:00.60,0:46:05.76,Default,,0,0,0,,you can use a compiler that enforce rules or the compiler are using false rules.
Dialogue: 0,0:46:06.20,0:46:07.69,Default,,0,0,0,,having an external tool helps
Dialogue: 0,0:46:07.69,0:46:09.93,Default,,0,0,0,,so let's start with an external tool.
Dialogue: 0,0:46:10.01,0:46:15.24,Default,,0,0,0,,and if the compiler writers get interested, that's so much better
Dialogue: 0,0:46:15.67,0:46:18.48,Default,,0,0,0,,and the other things
Dialogue: 0,0:46:18.65,0:46:22.82,Default,,0,0,0,,why didn't we just use the standard only?
Dialogue: 0,0:46:23.20,0:46:31.47,Default,,0,0,0,,because the standard currently as a stand doesn't have all the rules that we want for the standard for the GSL(the guideline library)
Dialogue: 0,0:46:31.59,0:46:33.88,Default,,0,0,0,,we want to use things now!
Dialogue: 0,0:46:34.57,0:46:38.76,Default,,0,0,0,,It's tiny, portable C++11
Dialogue: 0,0:46:39.16,0:46:41.57,Default,,0,0,0,,it doesn't depend on other libraries. free-standing.
Dialogue: 0,0:46:41.57,0:46:45.38,Default,,0,0,0,,you don't have to include whole broad of things you don't need.
Dialogue: 0,0:46:48.30,0:46:52.01,Default,,0,0,0,,it's a similar tool but not identical to boost:: and experimental:: components
Dialogue: 0,0:46:52.10,0:46:55.98,Default,,0,0,0,,that's actually good chance that it will become in some form or other.
Dialogue: 0,0:46:55.98,0:46:57.36,Default,,0,0,0,,but we are not going to wait
Dialogue: 0,0:46:57.46,0:46:58.90,Default,,0,0,0,,this is too simple
Dialogue: 0,0:46:58.96,0:47:01.35,Default,,0,0,0,,too easy, let's get going.
Dialogue: 0,0:47:01.35,0:47:02.33,Default,,0,0,0,,it's on github.
Dialogue: 0,0:47:02.33,0:47:05.88,Default,,0,0,0,,some of you've accessed yesterday or the day before.
Dialogue: 0,0:47:06.22,0:47:08.93,Default,,0,0,0,,and we use standard library
Dialogue: 0,0:47:09.52,0:47:21.63,Default,,0,0,0,,one of the things that you find with reasonably comprehensive or reasonably good old rules  set is that there's too many rules.
Dialogue: 0,0:47:22.02,0:47:27.64,Default,,0,0,0,,we need to help novices, experts, people with infrastructures, applicaions,
Dialogue: 0,0:47:27.64,0:47:27.80,Default,,0,0,0,,{\pos(287,363)}da
Dialogue: 0,0:47:27.80,0:47:28.01,Default,,0,0,0,,{\pos(273,367)}da
Dialogue: 0,0:47:28.01,0:47:28.13,Default,,0,0,0,,{\pos(241,360)}da
Dialogue: 0,0:47:28.13,0:47:28.33,Default,,0,0,0,,{\pos(215,349)}da
Dialogue: 0,0:47:28.33,0:47:28.47,Default,,0,0,0,,{\pos(157,361)}da
Dialogue: 0,0:47:28.47,0:47:28.84,Default,,0,0,0,,{\pos(128,374)}da
Dialogue: 0,0:47:29.10,0:47:33.08,Default,,0,0,0,,there are no way you can remember all of those rules
Dialogue: 0,0:47:33.26,0:47:34.60,Default,,0,0,0,,further more
Dialogue: 0,0:47:34.91,0:47:38.78,Default,,0,0,0,,I think I have 350 by now for this and no at the end.
Dialogue: 0,0:47:38.99,0:47:41.34,Default,,0,0,0,,these's too many and you won't even need to go and read them.
Dialogue: 0,0:47:41.45,0:47:47.44,Default,,0,0,0,,and, or,  more interstingly, you don't need all those rules
Dialogue: 0,0:47:48.67,0:47:51.76,Default,,0,0,0,,Most of you do it anyway, we don't make that mistakes
Dialogue: 0,0:47:51.87,0:47:53.52,Default,,0,0,0,,that we relearned that 10 years ago
Dialogue: 0,0:47:53.52,0:47:55.15,Default,,0,0,0,,so that all exist
Dialogue: 0,0:47:54.79,0:47:56.81,Default,,0,0,0,,every body knows it.
Dialogue: 0,0:47:57.02,0:47:57.89,Default,,0,0,0,,on the other hand
Dialogue: 0,0:47:57.89,0:48:00.97,Default,,0,0,0,,the rules are for the people that don't know it
Dialogue: 0,0:48:01.05,0:48:10.91,Default,,0,0,0,,the novices, the people that are casual users, people that has fifteen years experience on a different kind of code base. things like that, that's what the rules for.
Dialogue: 0,0:48:11.27,0:48:15.43,Default,,0,0,0,,and you can't sit wasting your time programming
Dialogue: 0,0:48:15.63,0:48:18.11,Default,,0,0,0,,trying to remember the rules or looking them up.
Dialogue: 0,0:48:18.11,0:48:19.32,Default,,0,0,0,,NO!
Dialogue: 0,0:48:19.37,0:48:23.05,Default,,0,0,0,,further more, you won't get there because the rules are extensible.
Dialogue: 0,0:48:23.05,0:48:25.15,Default,,0,0,0,,as we learned we add rules
Dialogue: 0,0:48:25.34,0:48:28.19,Default,,0,0,0,,so if last month you wrote something,
Dialogue: 0,0:48:28.38,0:48:31.72,Default,,0,0,0,,and you fulfill all the rules and this month you try again.
Dialogue: 0,0:48:32.16,0:48:35.40,Default,,0,0,0,,we hope to catch you again with some new rules.
Dialogue: 0,0:48:35.68,0:48:44.53,Default,,0,0,0,,that verified priciple, valided by experience will be helpful
Dialogue: 0,0:48:44.81,0:48:49.36,Default,,0,0,0,,and you shouldn't know all the rules, the tool knows the rules.
Dialogue: 0,0:48:49.52,0:48:56.35,Default,,0,0,0,,my idea is that you run the tool and it drop you right in there showing the rule on the screen.
Dialogue: 0,0:48:57.24,0:48:59.28,Default,,0,0,0,,what was the rule that violated?
Dialogue: 0,0:48:59.28,0:49:00.96,Default,,0,0,0,,where was it violated?
Dialogue: 0,0:49:00.96,0:49:02.91,Default,,0,0,0,,what's the rational for the rule?
Dialogue: 0,0:49:02.91,0:49:07.48,Default,,0,0,0,,what's the example of how bad it can get from problems like that?
Dialogue: 0,0:49:07.54,0:49:09.31,Default,,0,0,0,,and here is what you should do instead.
Dialogue: 0,0:49:09.39,0:49:10.93,Default,,0,0,0,,That's what I would like to see.
Dialogue: 0,0:49:12.75,0:49:15.32,Default,,0,0,0,,so thers is too many rules that doesn't worry me.
Dialogue: 0,0:49:15.40,0:49:16.96,Default,,0,0,0,,I want lots of rules.
Dialogue: 0,0:49:17.47,0:49:21.45,Default,,0,0,0,,here is a set of classification
Dialogue: 0,0:49:21.62,0:49:23.66,Default,,0,0,0,,there is philosophical rules
Dialogue: 0,0:49:23.80,0:49:26.33,Default,,0,0,0,,basically the conceptual framework
Dialogue: 0,0:49:26.59,0:49:28.66,Default,,0,0,0,,that cannot be validated
Dialogue: 0,0:49:28.70,0:49:32.73,Default,,0,0,0,,but it's really good if you understood what been said there.
Dialogue: 0,0:49:33.33,0:49:36.98,Default,,0,0,0,,if nothing else you'll know what we were thinking when we wrote them
Dialogue: 0,0:49:37.61,0:49:43.04,Default,,0,0,0,,and then there's all kinds of things, interfaces, functions, classes, class hierarchies
Dialogue: 0,0:49:43.04,0:49:43.19,Default,,0,0,0,,{\pos(48,248)}da
Dialogue: 0,0:49:43.19,0:49:43.42,Default,,0,0,0,,{\pos(39,269)}da
Dialogue: 0,0:49:43.42,0:49:43.55,Default,,0,0,0,,{\pos(66,314)}da
Dialogue: 0,0:49:43.56,0:49:43.77,Default,,0,0,0,,{\pos(24,408)}da
Dialogue: 0,0:49:43.75,0:49:43.90,Default,,0,0,0,,{\pos(69,423)}da
Dialogue: 0,0:49:43.90,0:49:44.16,Default,,0,0,0,,{\pos(100,437)}da
Dialogue: 0,0:49:45.27,0:49:48.50,Default,,0,0,0,, there's supporting sections, naming and layout
Dialogue: 0,0:49:48.50,0:49:53.89,Default,,0,0,0,,that's where every body goes and they say they don't like the rules we wrote that's fine.
Dialogue: 0,0:49:53.89,0:49:57.44,Default,,0,0,0,,never made anybody that the whole set of rules
Dialogue: 0,0:49:57.56,0:49:59.66,Default,,0,0,0,,people say that they want camel case.
Dialogue: 0,0:49:59.82,0:50:01.95,Default,,0,0,0,,sure, I hate camel case
Dialogue: 0,0:50:02.07,0:50:03.17,Default,,0,0,0,,apart from that.
Dialogue: 0,0:50:03.26,0:50:06.96,Default,,0,0,0,,what that c# camel case or java camel case ?
Dialogue: 0,0:50:08.45,0:50:09.94,Default,,0,0,0,,there's just too much of it
Dialogue: 0,0:50:09.99,0:50:11.68,Default,,0,0,0,,there's rules for performence.
Dialogue: 0,0:50:11.68,0:50:13.68,Default,,0,0,0,,some people interested in performence
Dialogue: 0,0:50:13.68,0:50:15.64,Default,,0,0,0,,there's different kinds of performence
Dialogue: 0,0:50:15.73,0:50:23.22,Default,,0,0,0,,some of these rules, you can go up and look at today now. but some of the areas are weak.
Dialogue: 0,0:50:23.29,0:50:25.76,Default,,0,0,0,,the guidence for standard library is weak
Dialogue: 0,0:50:26.04,0:50:30.02,Default,,0,0,0,,the standard for concurrency is fairly weak
Dialogue: 0,0:50:30.31,0:50:32.85,Default,,0,0,0,,because we hadn't have enough time
Dialogue: 0,0:50:32.88,0:50:39.83,Default,,0,0,0,,this as a project that infact started in April and we are shipping now.
Dialogue: 0,0:50:41.91,0:50:48.27,Default,,0,0,0,,This talk is trying to encourage you to help, to make it a community, a large community project
Dialogue: 0,0:50:48.45,0:50:52.20,Default,,0,0,0,,it is not some kind of polished academic things we'd like to
Dialogue: 0,0:50:52.20,0:50:56.02,Default,,0,0,0,,if we love to prove greate levels then this is the right thing
Dialogue: 0,0:50:56.34,0:51:02.29,Default,,0,0,0,,no, this is an attempt to do something major and something interesting.
Dialogue: 0,0:51:02.29,0:51:04.24,Default,,0,0,0,,this is not unambitious
Dialogue: 0,0:51:04.65,0:51:16.52,Default,,0,0,0,,we're trying to scale to the 4+ million c++ programmers and a few billion lines of code while not break the zero-overhead principle.
Dialogue: 0,0:51:17.25,0:51:19.35,Default,,0,0,0,,so the code will be better
Dialogue: 0,0:51:20.11,0:51:25.96,Default,,0,0,0,,no type errors, no resource leaks, no dangling pointers
Dialogue: 0,0:51:25.96,0:51:26.08,Default,,0,0,0,,{\pos(290,406)}da
Dialogue: 0,0:51:26.08,0:51:26.27,Default,,0,0,0,,{\pos(301,402)}da
Dialogue: 0,0:51:26.27,0:51:26.39,Default,,0,0,0,,{\pos(323,397)}da
Dialogue: 0,0:51:26.40,0:51:26.71,Default,,0,0,0,,{\pos(319,407)}da
Dialogue: 0,0:51:26.62,0:51:32.76,Default,,0,0,0,,we go after our least favorite bugs
Dialogue: 0,0:51:34.44,0:51:38.85,Default,,0,0,0,,so it's a full speed ahead, and we expect some rough waters
Dialogue: 0,0:51:39.30,0:51:44.18,Default,,0,0,0,,if you are thinking of a  sailing ship you can actually sail faster if there is a storm  going on
Dialogue: 0,0:51:44.50,0:51:46.24,Default,,0,0,0,,what's what we're headding into.
Dialogue: 0,0:51:46.61,0:51:51.03,Default,,0,0,0,,we actually aim to change the way we write code
Dialogue: 0,0:51:51.52,0:51:53.52,Default,,0,0,0,,and that means {\b1}YOU{\b0}.
Dialogue: 0,0:51:54.96,0:52:00.20,Default,,0,0,0,,what would you like your code to look like in 5 or 10 years?
Dialogue: 0,0:52:01.30,0:52:07.01,Default,,0,0,0,,and really honestly if the answer is {\i1}just like what I wrote yesterday{\i0}
Dialogue: 0,0:52:07.51,0:52:10.13,Default,,0,0,0,,there are some failling imagination here.
Dialogue: 0,0:52:10.45,0:52:12.69,Default,,0,0,0,,we really want to make change
Dialogue: 0,0:52:12.69,0:52:14.00,Default,,0,0,0,,that can be painful
Dialogue: 0,0:52:14.53,0:52:21.01,Default,,0,0,0,,it's not easy to modernize code, it's not easy to modernize a large codebase, it is painful
Dialogue: 0,0:52:21.57,0:52:27.11,Default,,0,0,0,,but, you know, if you don't do it. you have the same pain from your existing code
Dialogue: 0,0:52:27.47,0:52:30.94,Default,,0,0,0,,that now 10 years old code in 5 years will be 15 years old!]
Dialogue: 0,0:52:30.94,0:52:32.94,Default,,0,0,0,, and it is not going to feel any better!
Dialogue: 0,0:52:33.87,0:52:40.11,Default,,0,0,0,,and gradual adaption, of course is nessesary for this.
Dialogue: 0,0:52:40.34,0:52:52.24,Default,,0,0,0,,the idea of taking 5 million lines of codebase and saying, ok we just change this, and after the weekend we'll use the new version
Dialogue: 0,0:52:52.26,0:52:53.56,Default,,0,0,0,,hmmm...
Dialogue: 0,0:52:53.81,0:52:55.93,Default,,0,0,0,,probably not.
Dialogue: 0,0:52:56.18,0:53:01.12,Default,,0,0,0,,we will not agree what the code should look like so there'll be some discussions.
Dialogue: 0,0:53:01.55,0:53:04.70,Default,,0,0,0,,part of it will be, that not all code should look the same
Dialogue: 0,0:53:05.15,0:53:15.01,Default,,0,0,0,,I really don't want work under constraints from my flight control software when I'm writting ordinary applications, it just too painful
Dialogue: 0,0:53:15.19,0:53:19.16,Default,,0,0,0,,on the other hand there'll be discussion about what is common and what isn't.
Dialogue: 0,0:53:19.28,0:53:24.69,Default,,0,0,0,,if you look at the rules you'll find that some of them are some what controversial.
Dialogue: 0,0:53:24.95,0:53:26.56,Default,,0,0,0,,and that's fine.
Dialogue: 0,0:53:27.66,0:53:29.22,Default,,0,0,0,,I just choose what I'm presume right answer.
Dialogue: 0,0:53:29.36,0:53:32.38,Default,,0,0,0,,if you don't agree, I'll willing to argue with you.
Dialogue: 0,0:53:32.53,0:53:34.54,Default,,0,0,0,,so that's going to be fun!
Dialogue: 0,0:53:34.91,0:53:36.85,Default,,0,0,0,,and help wanted
Dialogue: 0,0:53:36.97,0:53:39.94,Default,,0,0,0,,look at the rules, help reviewing them
Dialogue: 0,0:53:40.26,0:53:42.34,Default,,0,0,0,,help man suggest new rules
Dialogue: 0,0:53:42.34,0:53:45.15,Default,,0,0,0,,help suggest better explanation of the rules
Dialogue: 0,0:53:46.03,0:53:49.42,Default,,0,0,0,,currently there's only two editors of this, me and Herb Sutter.
Dialogue: 0,0:53:49.69,0:53:52.23,Default,,0,0,0,,that is too lower number.
Dialogue: 0,0:53:52.23,0:53:54.11,Default,,0,0,0,,so we need more editors
Dialogue: 0,0:53:54.19,0:53:57.08,Default,,0,0,0,,but you have to earn your right to be an editor
Dialogue: 0,0:53:57.08,0:54:01.76,Default,,0,0,0,,that's a crucial positon in the community
Dialogue: 0,0:54:01.97,0:54:05.58,Default,,0,0,0,,so the current status, about 350 rules.
Dialogue: 0,0:54:05.92,0:54:07.88,Default,,0,0,0,,and there's a github for it
Dialogue: 0,0:54:08.80,0:54:12.30,Default,,0,0,0,,we put it live I think friday
Dialogue: 0,0:54:12.92,0:54:16.55,Default,,0,0,0,,and we already getting pull requests.
Dialogue: 0,0:54:16.80,0:54:20.79,Default,,0,0,0,,and thers's guidelines support library.
Dialogue: 0,0:54:20.90,0:54:28.56,Default,,0,0,0,,tested on clang, gcc, microsoft on windows, linux and mac
Dialogue: 0,0:54:28.68,0:54:30.80,Default,,0,0,0,,it's avaliable now
Dialogue: 0,0:54:30.90,0:54:32.84,Default,,0,0,0,,the first tool should come
Dialogue: 0,0:54:32.86,0:54:35.68,Default,,0,0,0,,microsoft is shipping something I think next month
Dialogue: 0,0:54:35.81,0:54:38.72,Default,,0,0,0,,I don't know their shipping schedules so it can't be percise.
Dialogue: 0,0:54:38.90,0:54:44.92,Default,,0,0,0,,and we hope ports to the other systems comming right after.
Dialogue: 0,0:54:45.09,0:54:54.66,Default,,0,0,0,,it's written as fairly intentive portable iso c++, so that should work.
Dialogue: 0,0:54:55.02,0:54:57.10,Default,,0,0,0,,and we need help
Dialogue: 0,0:54:57.79,0:54:59.06,Default,,0,0,0,,and
Dialogue: 0,0:54:59.43,0:55:05.03,Default,,0,0,0,,this paper, from my perspective means, that the basic c++ model is actually complete
Dialogue: 0,0:55:05.54,0:55:22.90,Default,,0,0,0,,hours going for the idea that you could get perfect resource safety and type safety now have been trying to get there for many many years, it was the idea from day 1 and I knew we couldn't get there in any time soon, I think we are there (now)
Dialogue: 0,0:55:24.87,0:55:25.86,Default,,0,0,0,,BTW
Dialogue: 0,0:55:25.86,0:55:28.35,Default,,0,0,0,,if you look at my definition of resource safety
Dialogue: 0,0:55:28.58,0:55:32.61,Default,,0,0,0,,you'll see that it's really not very many languages that can claim that.
Dialogue: 0,0:55:33.04,0:55:38.84,Default,,0,0,0,,and for static type safety, not very many languages can claim that.
Dialogue: 0,0:55:39.26,0:55:46.91,Default,,0,0,0,,no range errors and dereference errors without serious overhead, more language can cliam that but it's still hard.
Dialogue: 0,0:55:47.40,0:55:50.11,Default,,0,0,0,,this is not unambitious as I said
Dialogue: 0,0:55:50.24,0:55:55.98,Default,,0,0,0,,we now have concepts so we can deal templates in a more resonable way
Dialogue: 0,0:55:56.41,0:56:00.78,Default,,0,0,0,,so, with all of the problems solved from the resource point of view
Dialogue: 0,0:56:01.04,0:56:04.13,Default,,0,0,0,,why didn't I just go back to academia and design a new language?
Dialogue: 0,0:56:04.13,0:56:06.36,Default,,0,0,0,,That's after all what most people do right?
Dialogue: 0,0:56:06.36,0:56:07.86,Default,,0,0,0,,it's a cool thing to do
Dialogue: 0,0:56:08.07,0:56:09.27,Default,,0,0,0,,etc
Dialogue: 0,0:56:09.25,0:56:11.66,Default,,0,0,0,,competing wieh c++ is hard
Dialogue: 0,0:56:11.90,0:56:19.97,Default,,0,0,0,,I put these toolchains up there to show what anybody with a new languages are up against.
Dialogue: 0,0:56:21.06,0:56:26.32,Default,,0,0,0,,competing with c++ has over the years not been the winning strategy
Dialogue: 0,0:56:26.60,0:56:28.24,Default,,0,0,0,,and
Dialogue: 0,0:56:28.45,0:56:30.33,Default,,0,0,0,,it'll take, take time
Dialogue: 0,0:56:30.50,0:56:38.21,Default,,0,0,0,,and further more, certainly going into a new language could fracture the c++ community which is among the last thing I want to do.
Dialogue: 0,0:56:38.98,0:56:41.37,Default,,0,0,0,,so, we're going for something that can work now!
Dialogue: 0,0:56:41.92,0:56:46.06,Default,,0,0,0,,guidelines and tools, hope to get there.
Dialogue: 0,0:56:46.41,0:56:59.04,Default,,0,0,0,,so, with that, I'll switch to questions and I left the outline of the guidelines up there.
Dialogue: 0,0:56:59.14,0:57:00.48,Default,,0,0,0,,by the way
Dialogue: 0,0:57:00.74,0:57:06.69,Default,,0,0,0,,what we called guide there is Helios, Hercules fighting the Hydra.
Dialogue: 0,0:57:06.93,0:57:09.45,Default,,0,0,0,,this is a bit like what I feels like
Dialogue: 0,0:57:09.62,0:57:14.39,Default,,0,0,0,,we have many-headed monster we have to fight.
Dialogue: 0,0:57:14.56,0:57:19.20,Default,,0,0,0,,and there's a nasty tendency of getting more heads as we make progress
Dialogue: 0,0:57:19.46,0:57:20.43,Default,,0,0,0,,so, thank you!
Dialogue: 0,0:57:21.29,0:57:31.37,居中标题,,0,0,0,,～感谢 avplayer.org 制作英文字幕～
Dialogue: 0,0:57:33.10,0:57:36.61,Default,,0,0,0,,is there mic-phone somewhere?
Dialogue: 0,0:57:37.81,0:57:43.87,演讲回答,,0,0,0,,OK, I am back. so the questions is "why do I mark the owner rather than non-owner?"
Dialogue: 0,0:57:44.50,0:57:46.35,演讲回答,,0,0,0,,yes we discussed that
Dialogue: 0,0:57:47.70,0:57:56.00,演讲回答,,0,0,0,,My conjecture is that there are too many hundreds of millions lines of code that uses T* to mean non-owner.
Dialogue: 0,0:57:58.02,0:58:01.12,演讲回答,,0,0,0,,and I really don't want people to write very many owners.
Dialogue: 0,0:58:01.21,0:58:04.03,演讲回答,,0,0,0,,I want the owers to disapper into abstractions
Dialogue: 0,0:58:05.11,0:58:09.73,演讲回答,,0,0,0,,as for now, there are many more non-owners and owners
Dialogue: 0,0:58:19.68,0:58:22.13,演讲回答,,0,0,0,,in the future, I expect there to be a thousand or more than a thousand times as many non-owners as owners in code
Dialogue: 0,0:58:19.78,0:58:25.38,演讲回答,,0,0,0,,because pointers are now getting safer and you can use them more freely
Dialogue: 0,0:58:25.54,0:58:30.40,演讲回答,,0,0,0,,so I think a got the owner/non-owner default correct.
Dialogue: 0,0:58:30.50,0:58:37.33,演讲回答,,0,0,0,,maybe the first time in history of c++ we got default right. but I'm pretty sure this one is right!
Dialogue: 0,0:58:39.46,0:58:40.64,Default,主持人,0,0,0,,{\pos(1673,414)}Question here
Dialogue: 0,0:58:41.25,0:58:41.78,Default,,0,0,0,,{\pos(1702,218)}there
Dialogue: 0,0:58:42.77,0:58:43.17,观众提问,,0,0,0,,Hi!
Dialogue: 0,0:58:43.92,0:59:00.53,观众提问,,0,0,0,,I had a question about owner T. and one thing I was confused about is that, is owner T is just something that is used at compile time or does it use any sort of like runtime overhead or ?
Dialogue: 0,0:59:00.53,0:59:05.44,演讲回答,,0,0,0,,it's something that used only at compile time and it does absolutely nothing (at runtime)
Dialogue: 0,0:59:06.05,0:59:15.33,演讲回答,,0,0,0,,it is something that guides or an enforcement tool to see what you suppose to do with it.
Dialogue: 0,0:59:15.49,0:59:18.79,演讲回答,,0,0,0,,in paticular, if you're not an owner, you're not suppose to delete it
Dialogue: 0,0:59:19.02,0:59:21.01,演讲回答,,0,0,0,,you're not going to pass it to an owner.
Dialogue: 0,0:59:21.33,0:59:23.41,演讲回答,,0,0,0,,if you are an owner.
Dialogue: 0,0:59:23.44,0:59:28.93,演讲回答,,0,0,0,,you have better either give it to somebody else who is also an owner or delete it
Dialogue: 0,0:59:29.62,0:59:33.38,演讲回答,,0,0,0,,a tool can verify that, it doesn't do anything.
Dialogue: 0,0:59:33.73,0:59:37.84,演讲回答,,0,0,0,,you can encapsulated an owner into a, say,  unique pointer.
Dialogue: 0,0:59:38.05,0:59:42.67,演讲回答,,0,0,0,,and then just use it because it does the delete and has the right semantics
Dialogue: 0,0:59:42.67,0:59:46.21,演讲回答,,0,0,0,,the owner is a low-level marker to help static analysis
Dialogue: 0,0:59:46.44,0:59:55.62,演讲回答,,0,0,0,,I didn't mention but I sure static analysis is local, static analysis using very few rules, it's going to be fast
Dialogue: 0,0:59:55.65,1:00:00.02,演讲回答,,0,0,0,,it's not one of these  going to be in cute algorithm over all of your code
Dialogue: 0,1:00:00.17,1:00:03.38,演讲回答,,0,0,0,,it is local rules
Dialogue: 0,1:00:04.95,1:00:10.02,观众提问,,0,0,0,,What happens when you move from not null?
Dialogue: 0,1:00:10.84,1:00:13.87,演讲回答,,0,0,0,,What happens when I move from not null?
Dialogue: 0,1:00:14.52,1:00:15.50,演讲回答,,0,0,0,,into what?
Dialogue: 0,1:00:15.70,1:00:25.94,观众提问,,0,0,0,,you moved and the remaining status becomes null, right?
Dialogue: 0,1:00:26.21,1:00:27.45,演讲回答,,0,0,0,,emmm
Dialogue: 0,1:00:31.26,1:00:38.13,演讲回答,,0,0,0,,if you move from a pointer. it's just a copy. so it doesn't become null
Dialogue: 0,1:00:38.50,1:00:44.16,演讲回答,,0,0,0,,if you generalized it to smart pointers and such
Dialogue: 0,1:00:44.27,1:00:53.00,演讲回答,,0,0,0,,it will have to have the appropriate semantics, I don't know the implementations there, you should ask Neil Macintosh on Wednesday
Dialogue: 0,1:00:53.01,1:00:58.84,演讲回答,,0,0,0,,he is one of the editor of the last version of the implementation which I haven't read yet
Dialogue: 0,1:00:58.95,1:01:01.54,演讲回答,,0,0,0,,he made some improvements last week
Dialogue: 0,1:01:01.61,1:01:05.82,演讲回答,,0,0,0,,but basically, no, you can not violate not_null that easy
Dialogue: 0,1:01:13.67,1:01:18.52,观众提问,,0,0,0,,I'm guessing
Dialogue: 0,1:02:44.90,1:03:03.57,观众提问,,0,0,0,,总结起来就一句话： do you have guidelines for makeing C api safer in c++?
Dialogue: 0,1:03:04.37,1:03:10.58,演讲回答,,0,0,0,,I have no plans of dealing with foreign systems.
Dialogue: 0,1:03:10.67,1:03:14.77,演讲回答,,0,0,0,,that will not be in the core guidelines
Dialogue: 0,1:03:15.17,1:03:34.76,演讲回答,,0,0,0,,but I wouldn't be at all surprised and I'll be very happy if somebody would write a section asist how to interact with *, how to interact java, how to interact with python, I really hope to see somebody write those sections.
Dialogue: 0,1:03:34.87,1:03:41.56,演讲回答,,0,0,0,,quiet likely they will be of the form that you can do this the static analysis to make it simpler
Dialogue: 0,1:03:41.67,1:03:47.44,演讲回答,,0,0,0,,you can have this tiny tiny little setup classes for doing the transmission
Dialogue: 0,1:03:47.61,1:03:49.84,演讲回答,,0,0,0,,
